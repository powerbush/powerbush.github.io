<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://blog.liao.bz/atom.xml" rel="self"/>
  <link href="http://blog.liao.bz/"/>
  <updated>2014-12-17T15:48:32+08:00</updated>
  <id>http://blog.liao.bz/</id>
  <author>
    <name><![CDATA[liaobz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MR82_JB5_1.19_20140125版代码编译脚本讲解]]></title>
    <link href="http://blog.liao.bz/2014/02/07/mr82-jb5-1-dot-19-20140125ban-dai-ma-bian-yi-jiao-ben-jiang-jie/"/>
    <updated>2014-02-07T11:24:00+08:00</updated>
    <id>http://blog.liao.bz/2014/02/07/mr82-jb5-1-dot-19-20140125ban-dai-ma-bian-yi-jiao-ben-jiang-jie</id>
    <content type="html"><![CDATA[<p>在8312/8382平台上，因为软件上无法做到对不同版本及容量RAM的兼容，例如DDR2与DDR3，512MB与1024MB。之前的做法都是根据客户的需求，从而手动修改custom_MemoryDevice.h文件来编译相应的固件。<br/>
为了减少无谓的重复累赘的工作，新版代码再次对编译脚本进行更新，具体更新代码可自行查阅mediatek/config/common目录下的编译脚本。下面是对更新点的讲解。<br/>
本次更新的核心是对RAM版本和容量各种组合的重命名。理解了命名方式，便可以熟练的掌握和使用新的编译脚本。<br/>
如下图，新的命名可分为三部分：第一部分是RAM版本，第二部分是片选数量，第三部分是RAM容量。目前5种版本RAM具体含义可参照下图。</p>

<!-- more -->


<p><img class="center" src="http://192.168.2.96/blogimgs/2014-02-07-1-1.png" width="644" height="421" title="5种版本的RAM" >
而新的编译脚本则须加上RAM代号：如想编译DDR3.1024MB的MR6012H1C1W1软件，编译脚本为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./pack_user_image.sh R321 mr601 MR6012H1C1W1 new</span></code></pre></td></tr></table></div></figure>


<p>同时为了方便编译中性软件，在编译的时候也可以用R代替RAM型号，编译脚本则会自动编译多个preloader并打包(仅pack脚本，make脚本不支持)。如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./pack_user_image.sh R mr601 MR6012H1C1W1 new</span></code></pre></td></tr></table></div></figure>


<p>PS：<br/>
1.DDR2频率默认为533MHz，DDR3频率默认为916MHz。<br/>
2.目前R212的仅有spetex的PL017。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Camera插值]]></title>
    <link href="http://blog.liao.bz/2014/01/03/cameracha-zhi/"/>
    <updated>2014-01-03T09:55:00+08:00</updated>
    <id>http://blog.liao.bz/2014/01/03/cameracha-zhi</id>
    <content type="html"><![CDATA[<h4>Camera插值在底层已经做好，我们只需要在中间层和app层添加一个对应的picture size即可。但是有一些限制条件需要注意：</h4>

<h5>1．插值的倍数只能小于等于16倍，也就是说假如是1M的sensor，那最多只能插值到16M；</h5>

<h5>2．插值后的width和height都不能超过8192，也就是picture size设置的width和height的大小都不能超过8192；</h5>

<h5>3．若插值的大小超过12M：则需要打补丁</h5>

<h5>4．由于hardware jpeg encoder的限制，插值时设置的width和height请您分别都设为16的整数倍，若设置非16整数倍的width或height，则可能导致拍出来的图片会有异常(如图片扭曲、花屏、连拍的图片绿屏)。</h5>

<!-- more -->


<h2>下面是关于插值的方法：</h2>

<h3>（一）中间层修改</h3>

<h4>1.mediatek/custom/common/hal/imgsensor/\<sensor name\>/config.ftbl.\<sensor name\>.h</h4>

<p>（若没有该文件，则修改mediatek/custom/common/hal/imgsensor/src/config.ftbl.common_raw.h或者config.ftbl.common_yuv.h）<br/>
在如下定义picture size的地方增加您想要的size (宽和高必须是16的整数倍)，如果已经包含您要加的size，就不需要再增加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#if 1
</span><span class='line'>    //  Picture Size
</span><span class='line'>    FTABLE_CONFIG_AS_TYPE_OF_DEFAULT_VALUES(
</span><span class='line'>        KEY_AS_(MtkCameraParameters::KEY_PICTURE_SIZE),
</span><span class='line'>        SCENE_AS_DEFAULT_SCENE(
</span><span class='line'>            ITEM_AS_DEFAULT_("2560x1920"),
</span><span class='line'>            ITEM_AS_VALUES_(
</span><span class='line'>                "320x240",  "640x480",  "1024x768",  "1280x720",  "1280x768",  "1280x960"
</span><span class='line'>            )
</span><span class='line'>        ),
</span><span class='line'>    )
</span><span class='line'>#endif</span></code></pre></td></tr></table></div></figure>


<p>例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  Picture Size
</span><span class='line'>FTABLE_CONFIG_AS_TYPE_OF_DEFAULT_VALUES(
</span><span class='line'>    KEY_AS_(MtkCameraParameters::KEY_PICTURE_SIZE),
</span><span class='line'>    SCENE_AS_DEFAULT_SCENE(
</span><span class='line'>        ITEM_AS_DEFAULT_("2560x1920"),
</span><span class='line'>        ITEM_AS_VALUES_(
</span><span class='line'>            "320x240",  "640x480",  "1024x768",  "1280x720",  "1280x768",  "1280x960",  "1920x1088",  "1920x1152",
</span><span class='line'>        )
</span><span class='line'>    ),
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>1920:1088 ≈ 16:9<br/>
1920:1152 ≈ 5:3</p>

<p>如果是16:9的屏幕,则得确保2个分辨率都添加<br/>
width：height ≈ 16:9<br/>
width：height ≈ 5:3</p>

<h3>（二）app层的修改可以按照如下来修改：</h3>

<h4>1．packages/apps/Camera/res/values/strings.xml</h4>

<p>增加您想要的size，如果已经包含您要加的size，就不需要再增加</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;string name="pref_camera_picturesize_entry_3264x2448"&gt;8M pixels&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_2592x1936"&gt;5M pixels&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_2048x1536"&gt;3M pixels&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_1600x1200"&gt;2M pixels&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_1280x960"&gt;1.3M pixels&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_1024x768"&gt;1M pixels&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_640x480"&gt;VGA&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_320x240"&gt;QVGA&lt;/string&gt;</span></code></pre></td></tr></table></div></figure>


<p>例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;string name="pref_camera_picturesize_entry_3264x2448"&gt;8M pixels&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_2592x1936"&gt;5M pixels&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_2048x1536"&gt;3M pixels&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_1920x1088"&gt;2M pixels&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_1920x1152"&gt;2M pixels&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_1600x1200"&gt;2M pixels&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_1280x960"&gt;1.3M pixels&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_1024x768"&gt;1M pixels&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_640x480"&gt;VGA&lt;/string&gt;
</span><span class='line'>&lt;string name="pref_camera_picturesize_entry_320x240"&gt;QVGA&lt;/string&gt;</span></code></pre></td></tr></table></div></figure>


<h4>2．packages/apps/Camera/res/values/arrays.xml</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;string-array name="pref_camera_picturesize_entries" translatable="false"&gt;
</span><span class='line'>    &lt;!-- TODO: Change to a better name of the preference.
</span><span class='line'>            The first element of the array should be
</span><span class='line'>            "pref_camera_picturesize_entry_2592x1944". However, we are too
</span><span class='line'>            late for the translation. Since we show the same label as the
</span><span class='line'>            second item, we just use the second one instead.
</span><span class='line'>    --&gt;
</span><span class='line'>    &lt;!-- 4:3 --&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_320x240&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_640x480&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1024x768&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x960&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1600x1200&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2048x1536&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2592x1936&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_3264x2448&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_4096x3072&lt;/item&gt;
</span><span class='line'>    &lt;!-- 16:9 --&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_640x480&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x720&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2048x1152&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2560x1440&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2992x1680&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_3328x1872&lt;/item&gt;
</span><span class='line'>    &lt;!-- 5:3 --&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x768&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1600x1200&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2592x1936&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_3264x2448&lt;/item&gt;
</span><span class='line'>    &lt;!-- 3:2 --&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x960&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2048x1536&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2592x1936&lt;/item&gt;
</span><span class='line'>&lt;/string-array&gt;</span></code></pre></td></tr></table></div></figure>


<p>增加您想要的size，如果已经包含您要加的size，就不需要再增加
例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;string-array name="pref_camera_picturesize_entries" translatable="false"&gt;
</span><span class='line'>    &lt;!-- TODO: Change to a better name of the preference.
</span><span class='line'>            The first element of the array should be
</span><span class='line'>            "pref_camera_picturesize_entry_2592x1944". However, we are too
</span><span class='line'>            late for the translation. Since we show the same label as the
</span><span class='line'>            second item, we just use the second one instead.
</span><span class='line'>    --&gt;
</span><span class='line'>    &lt;!-- 4:3 --&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_320x240&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_640x480&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1024x768&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x960&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1600x1200&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2048x1536&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2592x1936&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_3264x2448&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_4096x3072&lt;/item&gt;
</span><span class='line'>    &lt;!-- 16:9 --&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_640x480&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x720&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1920x1088&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2048x1152&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2560x1440&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2992x1680&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_3328x1872&lt;/item&gt;
</span><span class='line'>    &lt;!-- 5:3 --&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x768&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1600x1200&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1920x1152&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2592x1936&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_3264x2448&lt;/item&gt;
</span><span class='line'>    &lt;!-- 3:2 --&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x960&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2048x1536&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;@string/pref_camera_picturesize_entry_2592x1936&lt;/item&gt;
</span><span class='line'>&lt;/string-array&gt;</span></code></pre></td></tr></table></div></figure>


<h4>3．packages/apps/Camera/res/values/arrays.xml</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;string-array name="pref_camera_picturesize_entryvalues" translatable="false"&gt;
</span><span class='line'>    &lt;!-- 4:3 --&gt;
</span><span class='line'>    &lt;item&gt;320x240&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;640x480&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;1024x768&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;1280x960&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;1600x1200&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2048x1536&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2560x1920&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;3264x2448&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;4096x3072&lt;/item&gt;
</span><span class='line'>    &lt;!-- 16:9 --&gt;
</span><span class='line'>    &lt;item&gt;640x352&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;1280x720&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2048x1152&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2560x1440&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2992x1680&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;3328x1872&lt;/item&gt;
</span><span class='line'>    &lt;!-- 5:3 --&gt;
</span><span class='line'>    &lt;item&gt;1280x768&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;1600x960&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2880x1728&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;3600x2160&lt;/item&gt;
</span><span class='line'>    &lt;!-- 3:2 --&gt;
</span><span class='line'>    &lt;item&gt;1440x960&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2048x1360&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2560x1712&lt;/item&gt;
</span><span class='line'>&lt;/string-array&gt;</span></code></pre></td></tr></table></div></figure>


<p>增加您想要的size，如果已经包含你要加的size，就不需要再增加<br/>
例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;string-array name="pref_camera_picturesize_entryvalues" translatable="false"&gt;
</span><span class='line'>    &lt;!-- 4:3 --&gt;
</span><span class='line'>    &lt;item&gt;320x240&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;640x480&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;1024x768&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;1280x960&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;1600x1200&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2048x1536&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2560x1920&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;3264x2448&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;4096x3072&lt;/item&gt;
</span><span class='line'>    &lt;!-- 16:9 --&gt;
</span><span class='line'>    &lt;item&gt;640x352&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;1280x720&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;1920x1088&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2048x1152&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2560x1440&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2992x1680&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;3328x1872&lt;/item&gt;
</span><span class='line'>    &lt;!-- 5:3 --&gt;
</span><span class='line'>    &lt;item&gt;1280x768&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;1600x960&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;1920x1152&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2880x1728&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;3600x2160&lt;/item&gt;
</span><span class='line'>    &lt;!-- 3:2 --&gt;
</span><span class='line'>    &lt;item&gt;1440x960&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2048x1360&lt;/item&gt;
</span><span class='line'>    &lt;item&gt;2560x1712&lt;/item&gt;
</span><span class='line'>&lt;/string-array&gt;</span></code></pre></td></tr></table></div></figure>


<h4>4．packages/apps/Camera/src/com/Android/Camera/CameraSettings.java</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static final String[] PICTURE_SIZE_16_9 = new String[] {
</span><span class='line'>    "640x352",
</span><span class='line'>    "1280x720",
</span><span class='line'>    "2048x1152",
</span><span class='line'>    "2560x1440",
</span><span class='line'>    "2992x1680",
</span><span class='line'>    "3328x1872",
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>public static final String[] PICTURE_SIZE_5_3 = new String[] {
</span><span class='line'>    "1280x768",
</span><span class='line'>    "1600x960",
</span><span class='line'>    "2880x1728",
</span><span class='line'>    "3600x2160",
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>增加您想要的size，如果已经包含你要加的size，就不需要再增加<br/>
例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static final String[] PICTURE_SIZE_16_9 = new String[] {
</span><span class='line'>    "640x352",
</span><span class='line'>    "1280x720",
</span><span class='line'>    "1920x1088",
</span><span class='line'>    "2048x1152",
</span><span class='line'>    "2560x1440",
</span><span class='line'>    "2992x1680",
</span><span class='line'>    "3328x1872",
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>public static final String[] PICTURE_SIZE_5_3 = new String[] {
</span><span class='line'>    "1280x768",
</span><span class='line'>    "1600x960",
</span><span class='line'>    "1920x1152",
</span><span class='line'>    "2880x1728",
</span><span class='line'>    "3600x2160",
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用命令2]]></title>
    <link href="http://blog.liao.bz/2013/10/19/git-common-commands/"/>
    <updated>2013-10-19T17:00:00+08:00</updated>
    <id>http://blog.liao.bz/2013/10/19/git-common-commands</id>
    <content type="html"><![CDATA[<h2>1、查看分支</h2>

<pre><code>repo branch 分支名前有个星号且显示为绿色 表示现在所在分支
</code></pre>

<h2>2、切换分支</h2>

<pre><code>repo checkout [分支名字] 如：repo checkout elink_sw  
</code></pre>

<p>※注：切换分支前务必提交先所在分支的所有修改<br/>
如切换分支后出现两个或多个绿色分支名代表切换前的分支有修改未提交，重新切换回之前的分支完成提交再切换</p>

<h2>3、 撤销分支</h2>

<pre><code>repo abandon  [分支名字]  
</code></pre>

<p>如: repo abandon vido</p>

<h2>4、分支重命名</h2>

<pre><code>repo forall -c git branch -m [分支名]
</code></pre>

<!--more-->


<h2>5、 撤销恢复状态</h2>

<pre><code>HEAD  指向最后一次提交的状态
git reset --hard HEAD   恢复到最后一次提交 log 的状态  
</code></pre>

<p>※注意:此操作会覆盖所有未提交的修改 如不小心覆盖 请使用git reflog 恢复
    git reset &ndash;soft [log ID]  恢复到指定ID状态，该ID之前的状态保存到暂存区<br/>
例如 log1  log2  log3 恢复到log3 则log2 log1的修改保存在暂存区 &ndash;hard则直接清除log2 log1
    git reset &ndash;mixed（默认不加）  恢复到指定ID状态，该ID之前的状态保存到工作区区<br/>
例如 log1  log2  log3 恢复到log3 则log2 log1的修改保存在工作区</p>

<h2>6、查看状态</h2>

<pre><code>repo status 迭代查看所有git项目状态  
git status  查看项目状态  
git status -s 简化输出

- 表示没有改变的文件
M 表示修改过的文件
A 表示新添加的文件
D 表示被删除的文件
R 表示被重命名的文件
C 表示复制的文件
</code></pre>

<h2>7、查看提交日志</h2>

<p>git log  显示提交的更新 默认显示提交者 提交时间 提交备注<br/>
   参数
    &ndash;author=xxxx    显示某个提交者提交的更新
    &ndash;no-merges      不显示合并代码自动提交的更新
    &ndash;merges         只显示合并的提交
    -p               显示每条更新的详细信息
    &ndash;stat           显示每条更新修改的文件统计
    &ndash;dirstat        显示更新文件的目录比例
    &ndash;name-only      显示修改过的文件路径
    &ndash;oneline        只显示提交ID和提交备注
    &ndash;date={local,relative,iso,rfc,short}         格式化输出日期
        local       同本地的日期格式           Date:   Sat Sep 28 14:37:00 2013
        relative    相对于今天的日期间隔       Date:   2 weeks ago
        iso         iso标准时间                Date:   2013-09-28 14:27:08 +0800
        rfc         RFC文档标准时间            Date:   Sat, 28 Sep 2013 14:37:00 +0800
        short       精简输出                   Date:   2013-09-25
    -<n>              限制输出记录数       例如：git log -2  只显示两条记录
    &ndash;since=<date>,&ndash;after=<date> 显示指定日期后的修改  例如: git log &ndash;since=2013-09-12<br/>
    &ndash;util=<date>,&ndash;before=<date>  显示指定日期前的修改  例如: git log &ndash;util=2013-09-12<br/>
指定某天提交的（例如指定2013.09.28号的提交）
    git log &ndash;since=2013-09-27 &ndash;util=2013-09-28
    git show [log ID] 显示某</p>

<h2>8、交互式提交修改到暂存区</h2>

<pre><code>repo stage -i
</code></pre>

<h2>9、删除不追踪的多余文件</h2>

<pre><code>git clean -nd  查看执行该命令被删除的文件列表
git clean -fd  删除上一步命令显示的文件  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用命令1]]></title>
    <link href="http://blog.liao.bz/2013/10/19/common-commands/"/>
    <updated>2013-10-19T16:00:00+08:00</updated>
    <id>http://blog.liao.bz/2013/10/19/common-commands</id>
    <content type="html"><![CDATA[<h2>1、同步代码</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repo start mtk --all                                          // 建立mtk分支
</span><span class='line'>repo forall -c "git checkout -b elink_sw md77/elink_sw"       // 获取elink_sw分支
</span><span class='line'>repo forall -c "git checkout -b  yourbranchname  elink_sw"    // 建立本地分支</span></code></pre></td></tr></table></div></figure>


<p>你如果要开发新客户，请基于elink_sw分支做新的分支，例如分支newbranchname。命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repo forall -c "git checkout -b newbranchname elink_sw"</span></code></pre></td></tr></table></div></figure>


<h2>2、查看分支</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repo branch</span></code></pre></td></tr></table></div></figure>


<h2>3、切换分支</h2>

<p>repo checkout [分支名字] 如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repo checkout elink_sw</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>4、把修改过的文件commit到各自的分支</h2>

<p>git commit -am [&ldquo;注释&rdquo;] 如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit -am "update some apk"</span></code></pre></td></tr></table></div></figure>


<h2>5、提交代码</h2>

<p>在切换分支之前先把修改过的代码提交<br/>
先运行repo status查看自己修改过的地方，确认是否OK<br/>
然后运行repo forall -c git commit -am &ldquo;自己的注释&rdquo; 提交（如果有新增加的文件，需要进入到该文件所在的目录。 运行git add .  然后 运行 git commit -am &ldquo;自己的注释&#8221;）<br/>
提交新增的文件：<br/>
跳转到新增文件的仓库目录下面  如：cd alps/vendor/mediatek/md706/<br/>
(1)运行 git add .<br/>
(2)运行 git commit -m &#8220;注释&rdquo;</p>

<h2>6、更新代码</h2>

<p><strong>更新代码前须先提交代码</strong></p>

<ol>
<li>切换分支到mtk分支（repo checkout mtk）</li>
<li>运行 repo sync</li>
<li>切换到elink_sw分支（repo checkout elink_sw）</li>
<li>运行repo forall -c git pull md77 elink_sw</li>
<li>切换本地项目分支</li>
<li>运行repo forall -c git merge elink_sw
(如果有提示conflict，需要打开提示冲突的文件，手动处理相关文件并提交（repo forall -c git commit -am &ldquo;自己的注释&#8221;）)</li>
</ol>


<h2>7、编译代码</h2>

<p>在alps目录下面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp mediatek/config/common/make_user_project.sh ./
</span><span class='line'>./make_user_project.sh md706 [机型名（MD7062HC2W1）] [new | systemimage | userdataimage]</span></code></pre></td></tr></table></div></figure>


<h2>8、提交删除掉的文件：</h2>

<p>切换到删除过文件的分支;如： cd alps/vendor/mediatek/md706/<br/>
逐一删除文件，命令：git rm 删除的文件;如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rm artifacts/out/target/product/md706/data/app/com.adobe.reader.apk</span></code></pre></td></tr></table></div></figure>


<p>所有的文件执行上面的命令之后输入 repo status会出现类似如下的情况：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xx@elinktek:~/code/xx_repo_git/alps/vendor/mediatek/md706$ repo status
</span><span class='line'># on branch huama
</span><span class='line'>project alps/vendor/mediatek/md706/             branch huama
</span><span class='line'> D-     artifacts/out/target/product/md706/data/app/aldiko.apk
</span><span class='line'> D-     artifacts/out/target/product/md706/data/app/com.adobe.reader.apk
</span><span class='line'> D-     artifacts/out/target/product/md706/data/app/documents.apk
</span><span class='line'> D-     artifacts/out/target/product/md706/data/app/flashplayer-2.apk
</span><span class='line'> D-     artifacts/out/target/product/md706/data/app/gps_test.1.2.4.apk
</span><span class='line'> D-     artifacts/out/target/product/md706/system/appbackup/aldiko.apk
</span><span class='line'> D-     artifacts/out/target/product/md706/system/appbackup/com.adobe.reader.apk
</span><span class='line'> D-     artifacts/out/target/product/md706/system/appbackup/documents.apk
</span><span class='line'> D-     artifacts/out/target/product/md706/system/appbackup/flashplayer-2.apk
</span><span class='line'> D-     artifacts/out/target/product/md706/system/appbackup/gps_test.1.2.4.apk</span></code></pre></td></tr></table></div></figure>


<p>然后输入git commit -m &ldquo;注释&rdquo; 来提交</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git仓库的建立以及repo的管理]]></title>
    <link href="http://blog.liao.bz/2013/10/19/build-repo-server/"/>
    <updated>2013-10-19T15:00:00+08:00</updated>
    <id>http://blog.liao.bz/2013/10/19/build-repo-server</id>
    <content type="html"><![CDATA[<h2>1. repo 的安装</h2>

<p>一般服务器上都安装了git，所以只需安装repo即可<br/>
简单一点的方法，就是直接从253服务器拷贝</p>

<h3>1.1 拷贝repo脚本</h3>

<p>路径：/usr/bin/repo<br/>
拷贝到当前服务器的相同目录下，即/usr/bin</p>

<h3>1.2然后拷贝repo程序目录到当前服务器</h3>

<p>路径：elink-soft@192.168.2.253:/home/elink-soft/repo<br/>
拷贝到本地服务器任意目录<br/>
比如拷贝到/work/repo/下面</p>

<!--more-->


<h3>1.3然后用vim编辑repo脚本</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim /usr/bin/repo</span></code></pre></td></tr></table></div></figure>


<p>修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>REPO_URL='elink-soft@192.168.2.253:~/repo/repo.git'</span></code></pre></td></tr></table></div></figure>


<p>这句为之前repo程序目录的拷贝到的地址,如本处应改为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>REPO_URL='/work/repo'</span></code></pre></td></tr></table></div></figure>


<h2>2. git仓库的建立</h2>

<h3>2.1 服务器端：</h3>

<p>此端建立git仓库，用于代码的下载，提交和管理<br/>
以192.168.2.96作为管理代码的服务器，elink账户作为代码管理账户<br/>
以89代码为例：</p>

<h4>2.1.1</h4>

<p>在elink的主目录下建立mq89目录，作为仓库的存放路径（m：mtk；q：quad；89：89 series）</p>

<h4>2.1.2</h4>

<p>在mq89下面分别建立2个目录：alps、manifest.git</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir alps manifest.git
</span><span class='line'>ls
</span><span class='line'>alps manifest.git</span></code></pre></td></tr></table></div></figure>


<h4>2.1.3</h4>

<p>在manifest.git目录中创建空的git仓库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init --bare</span></code></pre></td></tr></table></div></figure>


<h4>2.1.4</h4>

<p>很关键的一步，在alps下面创建**.git文件夹<br/>
规则：事先规划应该在哪些目录下面建立git仓库，以方便代码的管理。如,alps/kernel下面需要一个仓库，那么<br/>
就在alps目录下建立kernel.git目录，用于存放原始代码的远程仓库，然后初始化git，同2.3</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd alps
</span><span class='line'>mkdir kernel.git
</span><span class='line'>git init --bare</span></code></pre></td></tr></table></div></figure>


<p>如果是abi/cpp/下面有个git仓库<br/>
则应该递归创建目录abi/cpp.git</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd alps
</span><span class='line'>mkdir -p abi/cpp.git</span></code></pre></td></tr></table></div></figure>


<p>至此,服务器端的准备工作完毕</p>

<h3>2.2 本机端：</h3>

<p>此端作为原始代码的存放地，负责更新mtk的最新补丁，然后上传到服务器端<br/>
假设代码存放在mq89_std/alps目录下</p>

<h4>2.2.1</h4>

<p>创建本地的git仓库，和2.1.4的路径是相互关联<br/>
比如在服务器端有alps/kernel.git仓库<br/>
则在本地需有alps/kernel/.git仓库,即初始化git仓库是在kernel目录下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>alps/kernel
</span><span class='line'>git init-db
</span><span class='line'>git add .
</span><span class='line'>// 双引号内为修改提交提示，比如可以将prompt改成ph init git repository
</span><span class='line'>git commit -am <span class="s2">&quot;prompt&quot;</span>
</span><span class='line'>// 此句非常关键，把远程仓库和本地仓库联系起来
</span><span class='line'>git remote add master elink@192.168.2.98:~/mq89/alps/kernel.git
</span><span class='line'>git push master --all
</span></code></pre></td></tr></table></div></figure>


<p>如果是远程仓库abi/cpp.git</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nb">cd </span>alps/abi/cpp
</span><span class='line'>    git add .
</span><span class='line'>    git commit -am <span class="s2">&quot;prompt&quot;</span>
</span><span class='line'>    git remote add master elink@192.168.2.98:~/mq89/alps/abi/cpp.git
</span><span class='line'>    git push master --all
</span></code></pre></td></tr></table></div></figure>


<h4>2.2.2</h4>

<p>克隆远程manifest.git目录,在mq89_std目录下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone elink@192.168.2.98:~/mq89/manifest.git</span></code></pre></td></tr></table></div></figure>


<p> 此时</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls mq89_std
</span><span class='line'>alps manifest</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>注：关于代码中哪些目录需要建立git仓库</h3>

<p>原则：为了方便以后代码的管理，如果在一个目录下拥有多个子目录，并且除去子目录以外没有其他文件，应该在各个子目录中分别建立git仓库。如，alps/mediatek的各个子目录。<br/>
还有我们应该按平台区分目录，在各个目录下创建git仓库，如，alps/mediatek/platform目录。我们应该在其下
的common和mt6589这2个目录分别建立git仓库,这样更方便以后的代码更新和管理</p>

<h2>3. repo的管理</h2>

<h3>3.1 新建default.xml文件</h3>

<p>在manifest目录下新建default.xml文件，此文件是repo管理的所有git仓库(project)<br/>
内容如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>    <span class="nt">&lt;remote</span>  <span class="na">name=</span><span class="s">&quot;alps&quot;</span>
</span><span class='line'>           <span class="na">fetch=</span><span class="s">&quot;DIR&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;default</span> <span class="na">revision=</span><span class="s">&quot;master&quot;</span>
</span><span class='line'>           <span class="na">remote=</span><span class="s">&quot;alps&quot;</span>
</span><span class='line'>           <span class="na">sync-j=</span><span class="s">&quot;4&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;project</span> <span class="na">path=</span><span class="s">&quot;alps/ndk&quot;</span> <span class="na">name=</span><span class="s">&quot;alps/ndk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>注：</h4>

<p>fetch后面的双引号填写代码存放的路径，remote name 和default remote的内容需相同，default revision指
远程的分支，这里填写的是默认分支master，sync-j表示的开启的线程数。<br/>
project内容的path变量表示本地存放的目录，name表示服务器相关git的存放路径，即DIR/alps/ndk/</p>

<h3>3.2 git add default.xml并提交</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>mq89_std/manifest
</span><span class='line'>git add default.xml
</span><span class='line'>git commit -am <span class="s2">&quot;prompt&quot;</span>
</span><span class='line'>git remote add master elink@192.168.2.98:~/mq89/manifest.git
</span><span class='line'>git push master --all
</span></code></pre></td></tr></table></div></figure>


<h4>注：每次的更改都需要提交default.xml文件</h4>

<h2>4. 客户端的下载</h2>

<p>比如下载到repo-client文件夹中</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd repo-client
</span><span class='line'>repo init -u [repo-server's directory]/manifest.git
</span><span class='line'>repo sync</span></code></pre></td></tr></table></div></figure>


<p>即可以下载完成</p>

<h2>5. 关于copyfile的使用</h2>

<p>前面有提到过git仓库创建的原则，比如alps/mediatek/platform目录下，需要对common和mt6589，2个目录各创建一个git仓库，但是在alps/mediatek/platform下存在Android.mk和rules.mk 文件，如果只在common和mt6589这2个目录中建立仓库则会导致无法下载这2个mk文件，所以推荐的方法是在alps/mediatek/platform下面创建目录mtk，并将Android.mk和rules.mk这2个文件复制过去，下载的时候就可以通过copyfile去实现了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">path=</span><span class="s">&quot;alps/mediatek/platform/mtk&quot;</span> <span class="na">name=</span><span class="s">&quot;alps/mediatek/platform/mtk/&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;Android.mk&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/mediatek/platform/Android.mk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;rules.mk&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/mediatek/platform/rules.mk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>同理alps下面的几个文件也是一样的情况，可以在build中穿件mtk文件夹</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">path=</span><span class="s">&quot;alps/build&quot;</span> <span class="na">name=</span><span class="s">&quot;alps/build/&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;mtk/Makefile&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/Makefile&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;mtk/makeMtk&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/makeMtk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;mtk/mbldenv.sh&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/mbldenv.sh&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;mtk/mk&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/mk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repo添加project后补全本地分支]]></title>
    <link href="http://blog.liao.bz/2013/10/18/repo-project-add-local-branch-doc/"/>
    <updated>2013-10-18T15:00:00+08:00</updated>
    <id>http://blog.liao.bz/2013/10/18/repo-project-add-local-branch-doc</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>在repo的服务器端添加新project时(例如添加了MD900项目),本地完成同步后执行repo branch会碰到下面的情况:
    liaobz@elink:~/code/md77$ repo branch
       elink_sw                  | not in:
                                       alps/mediatek/config/md900
                                       alps/mediatek/custom/md900
                                       alps/vendor/mediatek/md900
    *  mtk                       | not in:
                                       alps/mediatek/config/md900
                                       alps/mediatek/custom/md900
                                       alps/vendor/mediatek/md900
碰到上面的情况的原因是新添加的repo project在本地没有创建本地分支,所以我们需要手动补全本地分支.</p>

<!--more-->


<h2>补全mtk分支</h2>

<p>mtk分支是在执行repo start mtk &ndash;all之后生成的分支，所以可以通过repo start mtk &ndash;all补全分支，也可执行repo start mtk [projectName]建立mtk分支，如
    liaobz@elink:~/code/md77$ repo start mtk &ndash;all
或
    liaobz@elink:~/code/md77$ repo start mtk alps/mediatek/config/md900
    liaobz@elink:~/code/md77$ repo start mtk alps/mediatek/custom/md900
    liaobz@elink:~/code/md77$ repo start mtk alps/vendor/mediatek/md900
完成上述步骤之后结果如下:
    liaobz@elink:~/code/md77$ repo branch
       elink_sw                  | not in:
                                       alps/mediatek/config/md900
                                       alps/mediatek/custom/md900
                                       alps/vendor/mediatek/md900
    *  mtk                       | in all projects</p>

<h2>补全elink_sw分支</h2>

<p>elink_sw分支是通过repo forall -c git checkout -b elink_sw md77/elink_sw命令创建的分支，所以可以再次执行此命令补全分支
    liaobz@elink:~/code/md77$ repo forall -c git checkout -b elink_sw md77/elink_sw
结果会有两类
    fatal: git checkout: branch elink_sw already exists
    Branch elink_sw set up to track remote branch elink_sw from md77.
或
    Switched to a new branch &lsquo;elink_sw&rsquo;
两种均是正常结果.<br/>
如果过程完全正常,就会得到以下结果
    liaobz@elink:~/code/md77$ repo branch
    *  elink_sw                  | in all projects</p>

<pre><code>   mtk                       | in all projects
</code></pre>

<hr />

<h2>补充一:</h2>

<p>在尝试补全elink_sw分支,可能会得到以下两种结果
    fatal: git checkout: branch elink_sw already exists
    Branch elink_sw set up to track remote branch elink_sw from md77.
或
    fatal: git checkout: updating paths is incompatible with switching branches.
    Did you intend to checkout &lsquo;md77/elink_sw&rsquo; which can not be resolved as commit?
前一种提示可以忽略,后一种提示是因为服务器端尚未创建elink_sw分支,请联系代码管理员并晚些时候再尝试同步elink_sw分支.</p>

<h2>补充二:</h2>

<p>本地的其他工作分支请执行以下命令补全
    repo forall -c git checkout -b local_branch elink_sw</p>

<h2>补充三:</h2>

<p>若出现以下提示
    fatal: git checkout: updating paths is incompatible with switching branches.
    Did you intend to checkout &lsquo;md77/elink_sw&rsquo; which can not be resolved as commit?
请重新sync之后再补全elink_sw分支
    repo checkout mtk
    repo sync</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[往服务器上push代码流程]]></title>
    <link href="http://blog.liao.bz/2013/09/28/push-doc/"/>
    <updated>2013-09-28T18:04:00+08:00</updated>
    <id>http://blog.liao.bz/2013/09/28/push-doc</id>
    <content type="html"><![CDATA[<h2>1.本地合成、测试及提交</h2>

<h3>1).本地合成与测试</h3>

<p>  所有的补丁都须在自己的分支上合成,假设本地分支名为patch<br/>
  在工作目录执行repo branch,所示结果如下: (*  patch表示当前所在为patch)</p>

<pre><code>lbz@elink:~$ repo branch
   elink_sw                  | in all projects
   mtk                       | in all projects
*  patch                     | in all projects
</code></pre>

<!--more-->


<h3>2).本地提交</h3>

<p>  在所有补丁都测试完毕后,执行repo status<br/>
  所示结果如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lbz@elink:~$ repo status
</span><span class='line'># on branch patch
</span><span class='line'>project alps/mediatek/config/md790/             branch patch
</span><span class='line'> -m     ProjectConfig.mk
</span><span class='line'>project alps/mediatek/custom/common/            branch patch
</span><span class='line'> --     kernel/lcm/md970_lvds/md970_lvds.c</span></code></pre></td></tr></table></div></figure>


<p>  根据上述结果可知:<br/>
  a.在alps/mediatek/config/md790/下修改了ProjectConfig.mk文件<br/>
  b.在alps/mediatek/custom/common/添加了kernel/lcm/md970_lvds/md970_lvds.c文件</p>

<p>  则可以用如下方式提交</p>

<h4>a.提交对ProjectConfig.mk文件的修改</h4>

<p>  (如果只是对文件修改,git commit -am &ldquo;注释&#8221;等价于执行git add 和 git commit两条命令)</p>

<pre><code>lbz@elink:~$ cd alps/mediatek/config/md790/
lbz@elink:~/alps/mediatek/config/md790$ git commit -am "update ProjectConfig.mk"
</code></pre>

<h4>b.提交对kernel/lcm/md970_lvds/md970_lvds.c文件的添加</h4>

<p>  (不可通过git commit -am &ldquo;注释&#8221;来提交,须单独git add命令)</p>

<pre><code>lbz@elink:~$ cd alps/mediatek/custom/common/
lbz@elink:~/alps/mediatek/custom/common$ git add kernel/lcm/md970_lvds/md970_lvds.c
lbz@elink:~/alps/mediatek/custom/common$ git commit -m "add md970_lvds.c"
</code></pre>

<p>  至此,本地分支的提交结束</p>

<h2>2.远程分支的拉取及与本地分支的合并</h2>

<p>  考虑到不同人可能会对同一文件进行修改从而导致修改冲突,所以所有冲突必须在本地解决之后才能执行push操作</p>

<h3>1).远程分支的拉取</h3>

<p>  拉取分支先须切换到mtk分支执行repo sync命令,然后执行切换到elink_sw分支执行pull操作</p>

<h4>a.repo sync</h4>

<p>  (repo sync的输出内容与更新内容的多少有变更)</p>

<pre><code>lbz@elink:~$ repo checkout mtk
Checkout mtk: 100% (424/424), done.  
liaobz@elink-soft-desktop:~$ repo sync
Fetching projects: 100% (424/424), done.
Syncing work tree: 100% (424/424), done.
</code></pre>

<h4>b.拉取远程代码</h4>

<pre><code>lbz@elink:~$ repo checkout elink_sw
Checkout elink_sw: 100% (424/424), done.  
lbz@elink:~$ repo forall -c git pull md77 elink_sw
</code></pre>

<h3>2).本地分支的合并</h3>

<p>  合并代码的时候须先切换到本地分支再进行git merge操作</p>

<pre><code>lbz@elink:~$ repo checkout patch
Checkout patch: 100% (424/424), done.  
lbz@elink:~$ repo forall -c git merge elink_sw
</code></pre>

<p>  注意输出内容,如果提到有冲突(conflict),须手动处理<br/>
  (过程暂略)</p>

<p>  <strong>!重要:须在合并完后再次测试,保证所做的更改未受合并影响</strong></p>

<h2>3.提交到远程elink_preview分支</h2>

<pre><code>git push md77 patch:elink_preview
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elink 代码规范]]></title>
    <link href="http://blog.liao.bz/2013/09/03/elink-code-server-guide2/"/>
    <updated>2013-09-03T18:05:00+08:00</updated>
    <id>http://blog.liao.bz/2013/09/03/elink-code-server-guide2</id>
    <content type="html"><![CDATA[<h2>1：机型命名：</h2>

<p>Elink 软件机型由内部自己定义，不和外部的外壳等等有关联。遵循简单、规律、好记的原则。<br/>
具体命名规则，请参考《Elink 机型命名规则》，项目前立项时，由项目经理提供配置单给蔡锦涛负责命名。<br/>
在代码里面，请给与变量PRODUCT_MODEL赋值，例如</p>

<pre><code>PRODUCT_MODEL=MD7065HC
</code></pre>

<p>那么系统标准的属性,ro.product.model会变赋值为</p>

<pre><code>ro.product.model=MD7065HC  
</code></pre>

<h2>2：软件版本号命名：</h2>

<p>软件版本号分为两个版本，一个是中性版本号，一个是生成版本号。</p>

<!--more-->


<ul>
<li><p>中性版本号：
为了标示当前中性代码的版本情况，不随编译日期而改变，一般不随版型机型而变化，影响整份代码，一般不包含客户需求，乃Elink标准软件。<br/>
给属性ro.custom.build.version赋值即可，例如：</p>

<p>  ro.custom.build.version=1.22_20130903
这个版本号还和Readme对应起来，还和代码的TAG对应起来，便于管理。</p></li>
<li><p>生成版本号
表示软件工程师制作出来的软件版本号命名，和具体的版型机型有关，还和编译日期有关。<br/>
例如：<br/>
规则为：芯片<em>版型</em>机型_(客户单号).YYYYMMDD<br/>
例如标准软件：MT77_MD7062HC1.20130903<br/>
例如客制软件：MT77_MD7062HC1_123456.20130903<br/>
它影响的属性为：</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ro.build.display.id</span></code></pre></td></tr></table></div></figure>


<h2>3：代码分支管理：</h2>

<p>一般代码，我们有以下几种情况：</p>

<ol>
<li>我们自己拿到的代码创建的仓库，我们简称为mtk分支，对应远程分支master。</li>
<li>Elink标准代码分支， 我们简称为elink_sw分支，一般对应远程分支为elink_sw分支。

<h2>4：目前代码管理存在的问题点：</h2>

<p>问题1：不同中性版本号之前的差异，无法快速切换？
解决方案：使用git tag.<br/>
每个repo 中的每个git使用一个tag，这个tag,使用中性版本号来表示，例如<br/>
当MT6577的代码，使用了1.22_20130903这个版本号，还需要在push上之前，打上这个tag信息。</p></li>
</ol>


<p>使用方法：</p>

<pre><code>git tag 1.22_20130903
</code></pre>

<p>简单操作如下：</p>

<pre><code>repo checkout elink_sw
repo forall -c git tag 1.22_20130903
repo forall -c git push remotegitname elink_sw：elink_sw   //推代码到指定分支上去。
repo forall -c git push remotegitname 1.22_20130903
</code></pre>

<p>具体请参考：<br/>
git的tag，跟分支一样简单。<br/>
每次上线养成打tag好习惯 :)</p>

<pre><code>$: git tag 1.22_20130903_publish
</code></pre>

<p>加上-f覆盖原有的tag</p>

<pre><code>$: git tag -f 1.22_20130903_publish
</code></pre>

<p>显示所有的tag</p>

<pre><code>$: git tag
1.22_20130903_publish
1.22_20130903_publish
1.22_20130903_publish
</code></pre>

<p>删除tag</p>

<pre><code>$: git tag -d 1.22_20130903_publish
</code></pre>

<p>tag要push上服务器，操作跟分支操作没有任何区别</p>

<p>*push 到服务器</p>

<pre><code>$: git push origin 1.22_20130903_publish
</code></pre>

<p>*从服务器上删除</p>

<pre><code>$: git push origin :1.22_20130903_publish
</code></pre>

<p>具体详细，可以参考git tag的帮助，或者参考其他资料获取。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elink-code-server-guide]]></title>
    <link href="http://blog.liao.bz/2013/09/03/elink-code-server-guide1/"/>
    <updated>2013-09-03T18:04:00+08:00</updated>
    <id>http://blog.liao.bz/2013/09/03/elink-code-server-guide1</id>
    <content type="html"><![CDATA[<p>目前已经搭建好代码服务器，后续的项目中使用git作为代码管理。请大家了解。<br/>
使用说明：<br/>
我们使用ssh来作为git通讯的协议。所以也使用ssh key 来授权和管理。<br/>
静态IP地址为192.168.2.96</p>

<h2>1：建立ssh key</h2>

<p>首先检查 ls -l ~/.ssh,看有无id_rsa 和id_rsa.pub文件。<br/>
如果没有，请键入ssh-keygen，然后一直回车，保持默认值。<br/>
如下所示：</p>

<p>然后请把id_rsa.pub文件更名为id_rsa.pub_yourname通过Email发送给LBZ。</p>

<!--more-->


<p>注：在git服务器端使用</p>

<pre><code>cat id_rsa.pub_paul &gt;&gt; .ssh/authorized_keys  
</code></pre>

<p>把用户的公钥放在服务器上，这样你就可以用自己的私钥id_rsa来访问了。这个就是原理。</p>

<h2>2：配置git</h2>

<p>git不欢迎没有name &amp; email的陌生人。<br/>
请使用</p>

<pre><code>git config --global user.name
git config --global user.email 
</code></pre>

<p>来简单配置下git.<br/>
另外最重要的是学习git的使用。</p>

<h2>3. 下载代码：</h2>

<p>1> MT6577</p>

<pre><code>repo init -u elink-code-server@192.168.2.96:/elink_code/sda/md77/manifest.git
repo sync
</code></pre>

<p>2> MT6589</p>

<pre><code>repo init -u elink-code-server@192.168.2.96:/elink_code/sda/mq89/manifest.git
repo sync
</code></pre>

<h2>4：管理代码：</h2>

<p>我们会建立三个分支，<br/>
分支mtk，为mtk原始的source.<br/>
分支elink_sw ，为我们公版的稳定版本的source.<br/>
分支yourbranchname ,为个人开发使用的版本,请更改名字，例如paul。</p>

<p>拿到代码后，请执行以下操作</p>

<pre><code>repo start mtk --all                                          //建立mtk分支
repo forall -c "git checkout -b elink_sw md77/elink_sw"       //获取elink_sw分支
repo forall -c "git checkout -b yourbranchname elink_sw"
</code></pre>

<p>!ok，你现在可以在你自己的yourbranchname上开发了。<br/>
<strong>注意一下操作：</strong><br/>
1. 你如果要开发新客户，请基于elink_sw分支做新的分支，例如分支newbranchname。命令 repo forall -c &ldquo;git checkout -b newbranchname elink_sw&rdquo;<br/>
2. 如果elink_sw有更新，请先切换到elink_sw分支，然后执行repo forall -c &ldquo;git pull remoteG remotebranchname&rdquo;<br/>
其中 remoteG表示的是远程仓库名，remotebranchname代表的是远程分支名。<br/>
3. 如果有你补丁确认后，需要上传到服务器，请再自己的分支确认后，然后更新到elink_sw分支。<br/>
然后在inet_team分支上，操作 repo forall -c &ldquo;git push remote_res_name elink_sw:elink_preview&rdquo;<br/>
即：</p>

<pre><code>repo forall -c "git push md77 elink_sw:elink_preview"
</code></pre>

<p>上传代码，会影响到所有的同事，所以请确认后再上传,谁上传谁负责。</p>

<h2>5：编译代码：</h2>

<pre><code>make_user_project.sh
make_project.sh
</code></pre>

<p>这样实现代码和配置的分开选择，但是一个命令搞定。<br/>
请大家使用新的脚本。<br/>
实现软件基础部分不动，用户的配置共用。<br/>
即可编译。<br/>
后续，我们陆续减少客户的代码公共部分的修改，减少打包时版型配置部分的影响，请各位浏览下目前的代码结构。<br/>
如果客户有比较多的源码修改，建议使用新的branch.基于elink_sw版本。后续elink_sw有更新，只需要merge elink_sw就可以。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大硬盘容量安装ubuntu]]></title>
    <link href="http://blog.liao.bz/2013/04/18/da-ying-pan-rong-liang-an-zhuang-ubuntu/"/>
    <updated>2013-04-18T23:35:00+08:00</updated>
    <id>http://blog.liao.bz/2013/04/18/da-ying-pan-rong-liang-an-zhuang-ubuntu</id>
    <content type="html"><![CDATA[<p>前几天公司购置了新服务器，前一天是装好了ubuntu 11.10，其实我是很奇怪为什么不装10.04或者12.04的，但这不是重点，开始叫我给服务器配置环境，作为用来编译android的服务器，结果第二天过去，说不能编译就把系统给重装了，改用10.04，但是装完进不去系统。停在一个</p>

<pre><code>grub rescue&gt;
</code></pre>

<p>的界面。当然还有其他信息，不过记得不是很清楚了。</p>

<!--more-->


<p>当然只能求助<a href="http://wwww.google.com/ncr">股勾</a>大神了，大部分结果都引向这样一个答案：</p>

<pre><code>1.先使用ls命令，找到Ubuntu的安装在哪个分区：
    grub rescue&gt;ls
会罗列所有的磁盘分区信息，比方说：
    (hd0,1),(hd0,5),(hd0,3),(hd0,2)
2.然后依次调用如下命令： X表示各个分区号码
    grub rescue&gt;ls (hd0,X)/boot/grub
如果都找不到的话，需要查一下是否因为Linux版本差异，造成grub的路径不对，例如直接ls(hd0,X)/grub等等。
3.假设找到（hd0,5）时，显示了文件夹中的文件，则表示Linux安装在这个分区。
4.调用如下命令：
    grub rescue&gt;set root=(hd0,5)
    grub rescue&gt;set prefix=(hd0,5)/boot/grub
    grub rescue&gt;insmod /boot/grub/normal.mod
5.然后调用如下命令，就可以显示出丢失的grub菜单了。
    grub rescue&gt;normal
6.不过不要高兴，如果这时重启，问题依旧存在，我们需要进入Linux中，对grub进行修复。
进入Linux之后，在命令行执行：
    sudo update-grub
    sudo grub-install /dev/sda
（sda是你的硬盘号码，千万不要指定分区号码，例如sda1，sda5等都不对）
7.重启测试是否已经恢复了grub的启动菜单
</code></pre>

<p>但是在步骤2我一直没遇到我所期待的结果，到达不了步骤3，得到结果要么是unknown filesystem,就是什么out of disk，疑惑了许久，换了好几个版本都是类似的错误。</p>

<p>就这样整整大半天，后面我想，要不分下区吧，之前都是把整个硬盘扔给linux，让他自己去分。分区的时候又去找股勾大神，3T硬盘太大不知道怎么下手啊，然后猛然想到MBR和GPT，会不会装不上系统就是硬盘太大的原因，MBR最大只支持2T，就给/home分区留了2000000M，给/boot留了100M，给swap留了10000M，剩下近1000000M扔给了/，然后重装，问题消失。</p>

<h2>事后诸葛</h2>

<p>之前整个硬盘直接扔给ubuntu，他会分三个区：启动分区、/、swap，有两个盘在我操作第二步的时候是unknown filesystem，但总有一个是out of disk，现在来看就是因为硬盘太大的缘故，目前网上流行的文章大多数重复而陈旧，老是把人往歧途上带。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再搭Octpress]]></title>
    <link href="http://blog.liao.bz/2013/04/17/zai-da-octpress/"/>
    <updated>2013-04-17T22:25:00+08:00</updated>
    <id>http://blog.liao.bz/2013/04/17/zai-da-octpress</id>
    <content type="html"><![CDATA[<p>本文主要参照<a href="http://octopress.org/docs/setup/">Octopress Setup</a>来搭建博客，数月前我曾写了<a href="http://blog.liao.bz/blog/2013/01/21/octopressde-luo-cheng/">Octopress的落成</a>，当时刚上手，迷迷糊糊就搭建好了博客，就两个时间点的比较而言，自认为对git以及ssh都相对熟练了许多，因此对搭建博客的整个流程都不再是迷迷糊糊过来的，所以最好你是熟悉ssh和git的，git的教程可以访问<a href="http://git-scm.com/book/zh">git-scm.com/book/zh</a>，需要梯子。</p>

<p>下面开始搭建了……</p>

<!--more-->


<h1>git</h1>

<p>首先安装git</p>

<pre><code>sudo apt-get install git
</code></pre>

<h1>Ruby 1.9.3 by RVM</h1>

<p>然后安装Ruby1.9.3，教程说有两种方法——<a href="http://octopress.org/docs/setup/rbenv">rbenv</a> or <a href="http://octopress.org/docs/setup/rvm">RVM</a>，我选择了后者。</p>

<h2>RVM</h2>

<p>先装RVM，参考<a href="http://octopress.org/docs/setup/rvm/?1366114402">Installing Ruby With RVM</a></p>

<pre><code>sudo apt-get install curl
</code></pre>

<h4>下面的命令不要执行了…翻到下面<a href="##RVM%20again">RVM again</a></h4>

<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby
</code></pre>

<p>执行完毕后输出的信息包含一下内容：<br>
 # [username],<br>
 #<br>
 #   Thank you for using RVM!<br>
 #   I sincerely hope that RVM helps to make your life easier and<br>
 #   more enjoyable!!!<br>
 #<br>
 # ~Wayne</p>

<h2>try Ruby 1.9.3</h2>

<pre><code>sudo apt-get install ruby-rvm
rvm install 1.9.3
</code></pre>

<p>在执行完上个命令的时候我没看仔细就开始了这个步骤，然后就有了如下的错误信息，其实上个步骤也有错误信息，选择性忽视掉了红字。</p>

<pre><code>ERROR: The requested url does not exist: 'ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-.tar.bz2'
ERROR: Error running 'bunzip2 &lt; '/usr/share/ruby-rvm/archives/ruby-1.9.3-.tar.bz2' | tar xf - -C /usr/share/ruby-rvm/tmp/rvm_src_8445', please read /usr/share/ruby-rvm/log/ruby-1.9.3/extract.log
ERROR: There has been an error while trying to extract the source.  
Halting the installation.
ERROR: There has been an error fetching the ruby interpreter. Halting the installation.
</code></pre>

<p>回去看才发现有两段错误信息</p>

<p>part 1:</p>

<pre><code>* WARNING: You're using ~/.profile, make sure you load it,
add the following line to ~/.bash_profile if it exists
otherwise add it to ~/.bash_login:

  source ~/.profile
</code></pre>

<p>part 2:</p>

<pre><code>Missing required packages: git-core.
RVM autolibs is now configured with mode '2' =&gt; 'check and stop if missing',
please run `rvm autolibs enable` to let RVM do its job or run and read `rvm autolibs [help]`
or visit https://rvm.io/rvm/autolibs for more information.
</code></pre>

<h2>back to RVM</h2>

<p>回去重装RVM，执行</p>

<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby
</code></pre>

<p>这次提示有些不同，他检测到RVM有错误：</p>

<pre><code>It looks you are one of the happy Ubuntu users,
RVM packaged by Ubuntu is old and broken,
follow this link for details how to fix:
  http://stackoverflow.com/a/9056395/497756
</code></pre>

<p>不过他提供了一个网址，来自著名的<a href="http://stackoverflow.com/a/9056395/497756">stackoverflow</a>，以下内容选自<a href="http://stackoverflow.com/a/9056395/497756">stackoverflow</a>：</p>

<p>You have broken version of RVM. Ubuntu does something to RVM that produces lots of errors, the only safe way of fixing for now is to:</p>

<pre><code>sudo apt-get --purge remove ruby-rvm
sudo rm -rf /usr/share/ruby-rvm /etc/rvmrc /etc/profile.d/rvm.sh
</code></pre>

<p>open new terminal and validate environment is clean from old RVM settings (should be no output):
(这里说要启动新的终端，应该不会输出什么)</p>

<pre><code>env | grep rvm
</code></pre>

<p>if there was output, try to open new terminal, if it does not help then restart your computer.(如果有输出要尝试启动新终端，不然就重启电脑。PS：我没启动新终端没输出，一开理解错误，我启动新终端，有输出，然后我以为正常了，然后开始了下面的操作。。。晕)</p>

<h2>RVM again</h2>

<p>install RVM：//期间输入三次左右的密码，下面的命令斜杠不是我加进去的，最好不要漏了</p>

<pre><code>\curl -L https://get.rvm.io | bash -s stable --ruby --autolibs=enable --auto-dotfiles
</code></pre>

<p>好像下面是输出：</p>

<pre><code>  If you find you need some hand-holding, take a look at [Installing Ruby on Ubuntu 12.04](http://blog.coolaj86.com/articles/installing-ruby-on-ubuntu-12-04.html), which gives a bit more explanation.
 * To start using RVM you need to run `source /home/liaobz/.rvm/scripts/rvm`
   in all your open shell windows, in rare cases you need to reopen all shell windows.
</code></pre>

<h2>Ruby 1.9.3</h2>

<p>运行</p>

<pre><code>rvm install 1.9.3
</code></pre>

<p>输一次密码之后再下载，我擦嘞，9789K的东西提示我要40多分钟，我想先去看一集《权利的游戏》了……操蛋的ubuntu12.04自带的电影播放机，ass和srt都加载不了，好在有深度影音……那可是人家葬礼啊，让个小子在那里卖萌(那小子是死者儿子…)……兰尼斯特家的侏儒也来卖萌……终于装完了……深度影音暂停后最小话会自动播放，播放放最小话才是暂停……</p>

<p>言归正传，先改个东西，选择终端->菜单->编辑(Edit)->配置文件首选项(Profile Preferences)->标题和命令(Title and Command)->命令(Command)->勾上以登录Shell方式运行命令(Run command as a login shell)</p>

<p>快捷一点就是先选中终端窗口，Alt+E,O,然后剩下的看上面</p>

<p>接着执行(貌似还得重启终端)</p>

<pre><code>rvm use 1.9.3
</code></pre>

<p>如果你偷懒没做上面的改动，会有下面的提示</p>

<pre><code>RVM is not a function, selecting rubies with 'rvm use ...' will not work.

You need to change your terminal emulator preferences to allow login shell.
Sometimes it is required to use `/bin/bash --login` as the command.
Please visit https://rvm.io/integration/gnome-terminal/ for a example.
</code></pre>

<p>意思就是你还是要改</p>

<pre><code>rvm rubygems latest
</code></pre>

<p>然后</p>

<pre><code>usrname@pcname:~$ ruby --version
ruby 1.9.3p392 (2013-02-22 revision 39386) [x86_64-linux]
</code></pre>

<p>Ruby就算好了，可以<a href="http://octopress.org/docs/setup">← Return to setup</a>了。</p>

<h1>Setup Octopress</h1>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
</code></pre>

<p>提示了一大段，选yes，接着下两个命令都不会出上面大问题</p>

<pre><code>gem install bundler
bundle install
</code></pre>

<p>如果你一边在看官网教程，你会发现上面有个rbenv rehash，那句不要执行，因为我用的RVM方式(# If you use rbenv, rehash to be able to run the bundle command)，我貌似断了下网，Ctrl+C了一下，重新执行，输出以下内容：</p>

<pre><code>Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.

rake install
</code></pre>

<h4>Octopress Setup Done!<br>Next Steps <a href="http://octopress.org/docs/deploying/">Set up deployment</a><br>这次我选择<a href="http://octopress.org/docs/deploying/github">Deploying to Github Pages »</a>，上次的Heroku太慢了</h4>

<h1>Deploying to Github Pages</h1>

<p>在登陆github前提下访问<a href="">new Github repository</a>，新建一个与用户名同名的repository，记住网页上提供的SSH地址，终端运行</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>输入刚才的SSH地址，输出提示若干，接着终端运行</p>

<pre><code>rake generate
rake deploy
</code></pre>

<h2></h2>

<h2></h2>

<p>此时应该是算完成了的，我自己倒是粗心做了比较多多余的事。官方说改动在十分钟左右生效，我的在提交过了十分钟还是不能访问，估计这个过程会稍微久一点。</p>

<p>PS:昨天后面太晚没去管了，回来发现<a href="http://liaobz.github.io/">liaobz.github.io</a>还是上不去，反倒是<a href="http://liaobz.github.io/liaobz/">liaobz.github.io/liaobz</a>可以上去了。我发誓我是参照With Github User/Organization pages来的，而不是参照的With Github Project pages (gh-pages)，总之我不考究了。</p>

<p>最终还是发现了我失误在什么地方，毕竟gh-pages不能独立域名不幸福啊……我新建的Repository Name是liaobz，这是错误的，正确的应该是liaobz.github.com，嗯 就这么多。</p>

<p>本文特地尽可能多的将错误步骤贴上博客，希望被官方教程误导了的同学可以检索到，从而解决乃至避免错误，本文难免有疏漏/错误的地方，欢迎不吝指出。</p>

<h2></h2>

<h2></h2>

<p>下面是一点点补充，如果你的执行步骤中出现了以下语句</p>

<pre><code>Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:

    git config --global user.name "Your Name"
    git config --global user.email you@example.com

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author
</code></pre>

<p>你最好先按顺序执行这三条命令，设定用户名/密码，然后是修改提交信息吧好像</p>

<pre><code>git config --global user.name "Your Name"
git config --global user.email you@example.com
git commit --amend --reset-author
</code></pre>

<p>执行rake deploy后输出的语句包含下面内容</p>

<pre><code>## Pushing generated _deploy website
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>应该是忘了配SSH Keys了，自行补上即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于电池寿命]]></title>
    <link href="http://blog.liao.bz/2013/01/29/guan-yu-dian-chi-shou-ming/"/>
    <updated>2013-01-29T22:51:00+08:00</updated>
    <id>http://blog.liao.bz/2013/01/29/guan-yu-dian-chi-shou-ming</id>
    <content type="html"><![CDATA[<p>经常发现身边很多人手机快没电了也不充电，当然能够理解他们这样做的目的是希望能够正确的使用电池，从而延长电池寿命，但是这一套其实只是在镉镍电池的时代才管用，现在的锂电池呢？</p>

<p>锂电池其实更适合浅充浅放，没电了就充吧，别漏了电话，还对电池有利。</p>

<!--more-->


<h2><a href="http://baike.baidu.com/view/65936.htm">Part 1:电池记忆效应</a></h2>

<h3>定义</h3>

<p>如果电池属镍镉电池，长期不彻底充电、放电，易在电池内留下痕迹，降低电池容量，这种现象称为电池记忆效应。意思是说，电池好像记忆用户日常的充、放电幅度和模式，日久就很难改变这种模式，不能再做大幅度充电或放电。 锂离子电池不存在这种效应。</p>

<h3>导致的原因</h3>

<p>由于传统工艺中负极为烧结式，镉晶粒较粗，如果镍镉电池在它们被完全放电之前就重新充电，镉晶粒容易聚集成块而使电池放电时形成次级放电平台。</p>

<p>电池会储存这一放电平台并在下次循环中将其作为放电的终点，尽管电池本身的容量可以使电池放电到更低的平台上。在以后的放电过程中电池将只记得这一低容量。同样在每一次使用中，任何一次不完全的放电都将加深这一效应，使电池的容量变得更低。</p>

<h3>怎样消除效应</h3>

<p>要消除这种效应，有两种方法，一是采用小电流深度放电（如用 0.1C 放至 0V ）一是采用大电流充放电（如 1C ）几次。</p>

<p>在实际应用中,消除记忆效应的方法有严格的规范和一个操作流程.操作不当会适得其反.</p>

<p>对于镍镉电池,正常的维护是定期深放电:平均每使用一个月(或30次循环)进行一次深放电(放电到1.0V/每节,老外称之为 exercise),平常使用是尽量用光电池或用到关机等手段可以缓解记忆效应的形成,但这个不是exercise,因为仪器(如手机)是不会用到 1.0V/每节才关机的,必须要专门的设备或线路来完成这项工作,幸好许多镍氢电池的充电器都带有这个功能.</p>

<p>对于长期没有进行exercise的镍镉电池,会因为记忆效应的累计,无法用exercise进行容量回复,这时则需要更深的放电(老外称recondition),这是一种用很小的电流长时间对电池放电到0.4V每节的一个过程,需要专业的设备进行.</p>

<p>对于镍氢电池,exercise进行的频率大概每三个月一次即可有效的缓解记忆效应.因为镍氢电池的循环寿命远远低于镍镉电池,几乎用不到recondition这个方法.</p>

<p><strong>建议1:每次充电以前对电池放电是没有必要,而且是有害的,因为电池的使用寿命无谓的减短了.</strong><br/>
<strong>建议2:用一个电阻接电池的正负极进行放电是不可取的,电流没法控制,容易过放到0V,甚至导致串联电池组的电池极性反转.</strong></p>

<h2><a href="http://baike.baidu.com/view/17063.htm#19">Part 2:浅放浅充是王道</a></h2>

<p>我知道百度知道能搜处很多与这个观点相悖的答案，可以看看<a href="http://baike.baidu.com/view/17063.htm#19">锂电池_百度百科</a>。</p>

<p>虽然大家都知道锂电池几乎没有记忆效应，但是都知道它有一个使用寿命，而且一般把这个寿命认为是“充电次数”。所以，为了尽量延长锂电池的寿命，很多朋友便喜欢满充满放，甚至不惜手动把电量全部耗尽，其实这仍旧不太科学。因为严格来说，锂电池的寿命与“充电周期”的完成次数有关，锂电池的寿命一般为300～500个充电周期，而“充电周期”却并不完全等同于“充电次数”。</p>

<p>什么是充电周期呢？就拿1块600毫安的锂电池来说，一个累计充电至600毫安的完整过程，才是一个充电周期。比如这块电池现在是600毫安的满电状态，在经过使用之后，电量完全耗尽，好，现在开始充电。第一次由0毫安充电到400毫安，然后用掉N毫安；第二次又充150毫安，再用掉N毫安；第三次再充100毫安，再用掉N毫安。虽然我们一共充了3次电，但只有第三次充电到一半，即再次充电至50毫安时，这三次充电的总量才达到了600毫安。也就是说，只要到这个时候，这块电池完成了一个充电周期。</p>

<p>当然，每次充电量的大小并不能做到精确的统计，我们在此只是打个比方，来证明一次充满电和多次冲满电的效果是一样的，但是对电池寿命的影响却不一样。很明显，如果我们每次都满充满放的话，那么充电一次，确实就等于完成了一个充电周期。而浅放浅充的话，则要充电数次才能完成一个充电周期。另外，还有一点请大家注意，电池在满电状态下存放并不合理，一来会对电池造成很大伤害；二来会造成电量的无谓流失，也就是说，有一部分电量会被白白浪费掉，而且这还以损害电池的充电周期为代价，那又何必呢？</p>

<p>根据大多数的使用经历来看，很少出现“一次完全充电，然后就一次性用尽电量”的情况。因此，还是建议大家浅放浅充，这样既方便使用，也能尽量延长锂电池的寿命。不过，对于第一次投入使用的锂电池来说，还请大家先满充满放3次，以求把电池的蓄电性能激发到最佳，然后再浅充浅放。<br/>
<a href="http://dc.abang.com/od/basic/a/lidian_shiyong.htm">文章出处</a>，虽然原文讲的是相机的锂电池，但是只要是锂电池都是相通的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过反射隐藏MX2的SmartBar]]></title>
    <link href="http://blog.liao.bz/2013/01/26/tong-guo-fan-she-yin-cang-mx2de-smartbar/"/>
    <updated>2013-01-26T05:40:00+08:00</updated>
    <id>http://blog.liao.bz/2013/01/26/tong-guo-fan-she-yin-cang-mx2de-smartbar</id>
    <content type="html"><![CDATA[<h2>由来</h2>

<p>SmartBar自打出来便一直引来不少争议，与此同时貌似便是官方与开发者的关于显示与隐藏SmartBar的竞赛，开发者千方百计希望可以隐藏掉SmartBar，而官方则想方设法不让开发者隐藏。</p>

<p>而网上流传的最广的setSystemUiVisibility貌似第一时间就被官方咔掉了，其他能找的资料少之又少，没办法，只能通过反编译学习别人怎么去掉。来个偷师学艺，希望程序员的偷也不算偷。</p>

<!--more-->


<h2>经过</h2>

<p>首先从安装包里面提取出dex文件</p>

<p><img src="http://blog.liao.bz/images/2013-01-26-1.png"></p>

<p>使用反编译工具反编译</p>

<p><img src="http://blog.liao.bz/images/2013-01-26-2.png"></p>

<p>随后使用jar浏览器查看反编译出来的文件，再逐步查看代码，肯定是优先查看MainActivity的，既然程序的设置里面是有选择关闭SmartBar的，便优先搜索preference</p>

<p><img src="http://blog.liao.bz/images/2013-01-26-3.png"></p>

<p>再找到com.weibo.net.s这个类搜索 j(boolean)方法</p>

<p><img src="http://blog.liao.bz/images/2013-01-26-4.png"></p>

<p>这样看来便大致可以猜测com.weibo.net.s是个常量类之类的，j(boolean)和w()分别是get/set方法，这样的话，回到MainActivity找到使用了set()方法的地方</p>

<p><img src="http://blog.liao.bz/images/2013-01-26-5.png"></p>

<p>一开始我还傻傻的以为setNavigationMode是我要的Key，跑了一遍才发现break才是我要找的，在这里终于见到了long time no see的goto，我的意思是…相信你们懂的，再来一次，搜索label217</p>

<p><img src="http://blog.liao.bz/images/2013-01-26-6.png"></p>

<p>这便是我要的结果了……不过217是什么？宿舍号码吗…管他嘞</p>

<h2>结果</h2>

<p>将代码拿过来优化之后</p>

<pre><code>    try {
        Class ActionBarClass = getActionBar().getClass();
        Class[] parameterTypes = new Class[1];
        parameterTypes[0] = Boolean.TYPE;
        Method setTabsShowAtBottom = ActionBarClass.getMethod(
                "setTabsShowAtBottom", parameterTypes);
        Object[] parameterValues = new Object[1];
        parameterValues[0] = Boolean.valueOf(true);
        setTabsShowAtBottom.invoke(getActionBar(), parameterValues);
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (IllegalArgumentException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
</code></pre>

<p>不过呢，最后的结果还是需要继续调整的，因为右上角的两个ActionBar图标应该不是你想要的吧。</p>

<p><img src="http://blog.liao.bz/images/2013-01-26-7.jpg" width="800" height="300" title="每日一文" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress的落成]]></title>
    <link href="http://blog.liao.bz/2013/01/21/octopressde-luo-cheng/"/>
    <updated>2013-01-21T22:31:00+08:00</updated>
    <id>http://blog.liao.bz/2013/01/21/octopressde-luo-cheng</id>
    <content type="html"><![CDATA[<p>最初看了<a href="http://ghosert.loadtrend.com/">ghosert</a>后开始用octpress搭建传说中的程序员博客，但是弄了四五次仍然失败了。
一开始参考<a href="http://octopress.org/docs/setup/">octpress</a>，在Deploying的时候选的是Github Pages，终究没能deploy成功。然后今天<a href="https://github.com%E4%B9%9F%E8%B7%9F%E7%9D%80Github">https://github.com%E4%B9%9F%E8%B7%9F%E7%9D%80Github</a> Pages在抢票助手的帮助下被GFW带走了，忽然又兴起尝试搭建Octpress，不过今天尝试在终端下通过goagent想要连接github时始终连不上。命令见下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global http.proxy http://127.0.0.1:8087</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>在一气之下就选了第二个HeroKu，开始弄了半天还是弄不上去，不甘心的google了一下heroku，发现Fenng<a href="http://dbanotes.net/arch/heroku_architecture.html">对其的评价</a>还是蛮高的，在我编辑博客的时候网站已经进不去了。
得益于前几次的折腾，什么git/ruby/ssh key/rbenv都弄好了，然后最后一次手动去zip了octpress解压，然后进octpress目录</p>

<pre><code>git init
gem install heroku
heroku create
git config branch.master.remote heroku
</code></pre>

<p>然后删去了.gitignore文件public那项，接着在终端</p>

<pre><code>rake generate
git add .
git commit -m 'site updated'
git push heroku master
</code></pre>

<p>然后，然后就可以了~</p>
]]></content>
  </entry>
  
</feed>
