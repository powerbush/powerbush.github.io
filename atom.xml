<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[liao.bz]]></title>
  <link href="http://blog.liao.bz/atom.xml" rel="self"/>
  <link href="http://blog.liao.bz/"/>
  <updated>2014-12-16T09:59:37+08:00</updated>
  <id>http://blog.liao.bz/</id>
  <author>
    <name><![CDATA[liaobz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MR82_JB5_1.19_20140125版代码编译脚本讲解]]></title>
    <link href="http://blog.liao.bz/blog/2014/02/07/mr82-jb5-1-dot-19-20140125ban-dai-ma-bian-yi-jiao-ben-jiang-jie/"/>
    <updated>2014-02-07T11:24:00+08:00</updated>
    <id>http://blog.liao.bz/blog/2014/02/07/mr82-jb5-1-dot-19-20140125ban-dai-ma-bian-yi-jiao-ben-jiang-jie</id>
    <content type="html"><![CDATA[<p>在8312/8382平台上，因为软件上无法做到对不同版本及容量RAM的兼容，例如DDR2与DDR3，512MB与1024MB。之前的做法都是根据客户的需求，从而手动修改custom_MemoryDevice.h文件来编译相应的固件。<br/>
为了减少无谓的重复累赘的工作，新版代码再次对编译脚本进行更新，具体更新代码可自行查阅mediatek/config/common目录下的编译脚本。下面是对更新点的讲解。<br/>
本次更新的核心是对RAM版本和容量各种组合的重命名。理解了命名方式，便可以熟练的掌握和使用新的编译脚本。<br/>
如下图，新的命名可分为三部分：第一部分是RAM版本，第二部分是片选数量，第三部分是RAM容量。目前5种版本RAM具体含义可参照下图。</p>

<!-- more -->


<p><img class="center" src="http://192.168.2.96/blogimgs/2014-02-07-1-1.png" width="644" height="421" title="5种版本的RAM" >
而新的编译脚本则须加上RAM代号：如想编译DDR3.1024MB的MR6012H1C1W1软件，编译脚本为
    ./pack_user_image.sh R321 mr601 MR6012H1C1W1 new
同时为了方便编译中性软件，在编译的时候也可以用R代替RAM型号，编译脚本则会自动编译多个preloader并打包(仅pack脚本，make脚本不支持)。如：
    ./pack_user_image.sh R mr601 MR6012H1C1W1 new</p>

<p>PS：<br/>
1.DDR2频率默认为533MHz，DDR3频率默认为916MHz。<br/>
2.目前R212的仅有spetex的PL017。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Camera插值]]></title>
    <link href="http://blog.liao.bz/blog/2014/01/03/cameracha-zhi/"/>
    <updated>2014-01-03T09:55:00+08:00</updated>
    <id>http://blog.liao.bz/blog/2014/01/03/cameracha-zhi</id>
    <content type="html"><![CDATA[<h4>Camera插值在底层已经做好，我们只需要在中间层和app层添加一个对应的picture size即可。但是有一些限制条件需要注意：</h4>

<h5>1．插值的倍数只能小于等于16倍，也就是说假如是1M的sensor，那最多只能插值到16M；</h5>

<h5>2．插值后的width和height都不能超过8192，也就是picture size设置的width和height的大小都不能超过8192；</h5>

<h5>3．若插值的大小超过12M：则需要打补丁</h5>

<h5>4．由于hardware jpeg encoder的限制，插值时设置的width和height请您分别都设为16的整数倍，若设置非16整数倍的width或height，则可能导致拍出来的图片会有异常(如图片扭曲、花屏、连拍的图片绿屏)。</h5>

<!-- more -->


<h2>下面是关于插值的方法：</h2>

<h3>（一）中间层修改</h3>

<h4>1.mediatek/custom/common/hal/imgsensor/\<sensor name\>/config.ftbl.\<sensor name\>.h</h4>

<p>（若没有该文件，则修改mediatek/custom/common/hal/imgsensor/src/config.ftbl.common_raw.h或者config.ftbl.common_yuv.h）<br/>
在如下定义picture size的地方增加您想要的size (宽和高必须是16的整数倍)，如果已经包含您要加的size，就不需要再增加。
    #if 1
        //  Picture Size
        FTABLE_CONFIG_AS_TYPE_OF_DEFAULT_VALUES(
            KEY_AS<em>(MtkCameraParameters::KEY_PICTURE_SIZE),
            SCENE_AS_DEFAULT_SCENE(
                ITEM_AS_DEFAULT</em>(&ldquo;2560x1920&rdquo;),
                ITEM_AS_VALUES_(
                    &ldquo;320x240&rdquo;,  &ldquo;640x480&rdquo;,  &ldquo;1024x768&rdquo;,  &ldquo;1280x720&rdquo;,  &ldquo;1280x768&rdquo;,  &ldquo;1280x960&rdquo;
                )
            ),
        )
    #endif</p>

<p>例如：
    //  Picture Size
    FTABLE_CONFIG_AS_TYPE_OF_DEFAULT_VALUES(
        KEY_AS<em>(MtkCameraParameters::KEY_PICTURE_SIZE),
        SCENE_AS_DEFAULT_SCENE(
            ITEM_AS_DEFAULT</em>(&ldquo;2560x1920&rdquo;),
            ITEM_AS_VALUES_(
                &ldquo;320x240&rdquo;,  &ldquo;640x480&rdquo;,  &ldquo;1024x768&rdquo;,  &ldquo;1280x720&rdquo;,  &ldquo;1280x768&rdquo;,  &ldquo;1280x960&rdquo;,  &ldquo;1920x1088&rdquo;,  &ldquo;1920x1152&rdquo;,
            )
        ),
    )</p>

<p>1920:1088 ≈ 16:9<br/>
1920:1152 ≈ 5:3</p>

<p>如果是16:9的屏幕,则得确保2个分辨率都添加<br/>
width：height ≈ 16:9<br/>
width：height ≈ 5:3</p>

<h3>（二）app层的修改可以按照如下来修改：</h3>

<h4>1．packages/apps/Camera/res/values/strings.xml</h4>

<p>增加您想要的size，如果已经包含您要加的size，就不需要再增加</p>

<pre><code>&lt;string name="pref_camera_picturesize_entry_3264x2448"&gt;8M pixels&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_2592x1936"&gt;5M pixels&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_2048x1536"&gt;3M pixels&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_1600x1200"&gt;2M pixels&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_1280x960"&gt;1.3M pixels&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_1024x768"&gt;1M pixels&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_640x480"&gt;VGA&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_320x240"&gt;QVGA&lt;/string&gt;
</code></pre>

<p>例如：</p>

<pre><code>&lt;string name="pref_camera_picturesize_entry_3264x2448"&gt;8M pixels&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_2592x1936"&gt;5M pixels&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_2048x1536"&gt;3M pixels&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_1920x1088"&gt;2M pixels&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_1920x1152"&gt;2M pixels&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_1600x1200"&gt;2M pixels&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_1280x960"&gt;1.3M pixels&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_1024x768"&gt;1M pixels&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_640x480"&gt;VGA&lt;/string&gt;
&lt;string name="pref_camera_picturesize_entry_320x240"&gt;QVGA&lt;/string&gt;
</code></pre>

<h4>2．packages/apps/Camera/res/values/arrays.xml</h4>

<pre><code>&lt;string-array name="pref_camera_picturesize_entries" translatable="false"&gt;
    &lt;!-- TODO: Change to a better name of the preference.
            The first element of the array should be
            "pref_camera_picturesize_entry_2592x1944". However, we are too
            late for the translation. Since we show the same label as the
            second item, we just use the second one instead.
    --&gt;
    &lt;!-- 4:3 --&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_320x240&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_640x480&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1024x768&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x960&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1600x1200&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2048x1536&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2592x1936&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_3264x2448&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_4096x3072&lt;/item&gt;
    &lt;!-- 16:9 --&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_640x480&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x720&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2048x1152&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2560x1440&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2992x1680&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_3328x1872&lt;/item&gt;
    &lt;!-- 5:3 --&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x768&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1600x1200&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2592x1936&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_3264x2448&lt;/item&gt;
    &lt;!-- 3:2 --&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x960&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2048x1536&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2592x1936&lt;/item&gt;
&lt;/string-array&gt;
</code></pre>

<p>增加您想要的size，如果已经包含您要加的size，就不需要再增加
例如：</p>

<pre><code>&lt;string-array name="pref_camera_picturesize_entries" translatable="false"&gt;
    &lt;!-- TODO: Change to a better name of the preference.
            The first element of the array should be
            "pref_camera_picturesize_entry_2592x1944". However, we are too
            late for the translation. Since we show the same label as the
            second item, we just use the second one instead.
    --&gt;
    &lt;!-- 4:3 --&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_320x240&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_640x480&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1024x768&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x960&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1600x1200&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2048x1536&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2592x1936&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_3264x2448&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_4096x3072&lt;/item&gt;
    &lt;!-- 16:9 --&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_640x480&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x720&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1920x1088&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2048x1152&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2560x1440&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2992x1680&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_3328x1872&lt;/item&gt;
    &lt;!-- 5:3 --&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x768&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1600x1200&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1920x1152&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2592x1936&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_3264x2448&lt;/item&gt;
    &lt;!-- 3:2 --&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_1280x960&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2048x1536&lt;/item&gt;
    &lt;item&gt;@string/pref_camera_picturesize_entry_2592x1936&lt;/item&gt;
&lt;/string-array&gt;
</code></pre>

<h4>3．packages/apps/Camera/res/values/arrays.xml</h4>

<pre><code>&lt;string-array name="pref_camera_picturesize_entryvalues" translatable="false"&gt;
    &lt;!-- 4:3 --&gt;
    &lt;item&gt;320x240&lt;/item&gt;
    &lt;item&gt;640x480&lt;/item&gt;
    &lt;item&gt;1024x768&lt;/item&gt;
    &lt;item&gt;1280x960&lt;/item&gt;
    &lt;item&gt;1600x1200&lt;/item&gt;
    &lt;item&gt;2048x1536&lt;/item&gt;
    &lt;item&gt;2560x1920&lt;/item&gt;
    &lt;item&gt;3264x2448&lt;/item&gt;
    &lt;item&gt;4096x3072&lt;/item&gt;
    &lt;!-- 16:9 --&gt;
    &lt;item&gt;640x352&lt;/item&gt;
    &lt;item&gt;1280x720&lt;/item&gt;
    &lt;item&gt;2048x1152&lt;/item&gt;
    &lt;item&gt;2560x1440&lt;/item&gt;
    &lt;item&gt;2992x1680&lt;/item&gt;
    &lt;item&gt;3328x1872&lt;/item&gt;
    &lt;!-- 5:3 --&gt;
    &lt;item&gt;1280x768&lt;/item&gt;
    &lt;item&gt;1600x960&lt;/item&gt;
    &lt;item&gt;2880x1728&lt;/item&gt;
    &lt;item&gt;3600x2160&lt;/item&gt;
    &lt;!-- 3:2 --&gt;
    &lt;item&gt;1440x960&lt;/item&gt;
    &lt;item&gt;2048x1360&lt;/item&gt;
    &lt;item&gt;2560x1712&lt;/item&gt;
&lt;/string-array&gt;
</code></pre>

<p>增加您想要的size，如果已经包含你要加的size，就不需要再增加<br/>
例如：</p>

<pre><code>&lt;string-array name="pref_camera_picturesize_entryvalues" translatable="false"&gt;
    &lt;!-- 4:3 --&gt;
    &lt;item&gt;320x240&lt;/item&gt;
    &lt;item&gt;640x480&lt;/item&gt;
    &lt;item&gt;1024x768&lt;/item&gt;
    &lt;item&gt;1280x960&lt;/item&gt;
    &lt;item&gt;1600x1200&lt;/item&gt;
    &lt;item&gt;2048x1536&lt;/item&gt;
    &lt;item&gt;2560x1920&lt;/item&gt;
    &lt;item&gt;3264x2448&lt;/item&gt;
    &lt;item&gt;4096x3072&lt;/item&gt;
    &lt;!-- 16:9 --&gt;
    &lt;item&gt;640x352&lt;/item&gt;
    &lt;item&gt;1280x720&lt;/item&gt;
    &lt;item&gt;1920x1088&lt;/item&gt;
    &lt;item&gt;2048x1152&lt;/item&gt;
    &lt;item&gt;2560x1440&lt;/item&gt;
    &lt;item&gt;2992x1680&lt;/item&gt;
    &lt;item&gt;3328x1872&lt;/item&gt;
    &lt;!-- 5:3 --&gt;
    &lt;item&gt;1280x768&lt;/item&gt;
    &lt;item&gt;1600x960&lt;/item&gt;
    &lt;item&gt;1920x1152&lt;/item&gt;
    &lt;item&gt;2880x1728&lt;/item&gt;
    &lt;item&gt;3600x2160&lt;/item&gt;
    &lt;!-- 3:2 --&gt;
    &lt;item&gt;1440x960&lt;/item&gt;
    &lt;item&gt;2048x1360&lt;/item&gt;
    &lt;item&gt;2560x1712&lt;/item&gt;
&lt;/string-array&gt;
</code></pre>

<h4>4．packages/apps/Camera/src/com/Android/Camera/CameraSettings.java</h4>

<pre><code>public static final String[] PICTURE_SIZE_16_9 = new String[] {
    "640x352",
    "1280x720",
    "2048x1152",
    "2560x1440",
    "2992x1680",
    "3328x1872",
};

public static final String[] PICTURE_SIZE_5_3 = new String[] {
    "1280x768",
    "1600x960",
    "2880x1728",
    "3600x2160",
};
</code></pre>

<p>增加您想要的size，如果已经包含你要加的size，就不需要再增加<br/>
例如：
s
    public static final String[] PICTURE_SIZE_16_9 = new String[] {
        &ldquo;640x352&rdquo;,
        &ldquo;1280x720&rdquo;,
        &ldquo;1920x1088&rdquo;,
        &ldquo;2048x1152&rdquo;,
        &ldquo;2560x1440&rdquo;,
        &ldquo;2992x1680&rdquo;,
        &ldquo;3328x1872&rdquo;,
    };</p>

<pre><code>public static final String[] PICTURE_SIZE_5_3 = new String[] {
    "1280x768",
    "1600x960",
    "1920x1152",
    "2880x1728",
    "3600x2160",
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用命令2]]></title>
    <link href="http://blog.liao.bz/blog/2013/10/19/git-common-commands/"/>
    <updated>2013-10-19T17:00:00+08:00</updated>
    <id>http://blog.liao.bz/blog/2013/10/19/git-common-commands</id>
    <content type="html"><![CDATA[<h2>1、查看分支</h2>

<pre><code>repo branch 分支名前有个星号且显示为绿色 表示现在所在分支
</code></pre>

<h2>2、切换分支</h2>

<pre><code>repo checkout [分支名字] 如：repo checkout elink_sw  
</code></pre>

<p>※注：切换分支前务必提交先所在分支的所有修改<br/>
如切换分支后出现两个或多个绿色分支名代表切换前的分支有修改未提交，重新切换回之前的分支完成提交再切换</p>

<h2>3、 撤销分支</h2>

<pre><code>repo abandon  [分支名字]  
</code></pre>

<p>如: repo abandon vido</p>

<h2>4、分支重命名</h2>

<pre><code>repo forall -c git branch -m [分支名]
</code></pre>

<!--more-->


<h2>5、 撤销恢复状态</h2>

<pre><code>HEAD  指向最后一次提交的状态
git reset --hard HEAD   恢复到最后一次提交 log 的状态  
</code></pre>

<p>※注意:此操作会覆盖所有未提交的修改 如不小心覆盖 请使用git reflog 恢复
    git reset &ndash;soft [log ID]  恢复到指定ID状态，该ID之前的状态保存到暂存区<br/>
例如 log1  log2  log3 恢复到log3 则log2 log1的修改保存在暂存区 &ndash;hard则直接清除log2 log1
    git reset &ndash;mixed（默认不加）  恢复到指定ID状态，该ID之前的状态保存到工作区区<br/>
例如 log1  log2  log3 恢复到log3 则log2 log1的修改保存在工作区</p>

<h2>6、查看状态</h2>

<pre><code>repo status 迭代查看所有git项目状态  
git status  查看项目状态  
git status -s 简化输出

- 表示没有改变的文件
M 表示修改过的文件
A 表示新添加的文件
D 表示被删除的文件
R 表示被重命名的文件
C 表示复制的文件
</code></pre>

<h2>7、查看提交日志</h2>

<p>git log  显示提交的更新 默认显示提交者 提交时间 提交备注<br/>
   参数
    &ndash;author=xxxx    显示某个提交者提交的更新
    &ndash;no-merges      不显示合并代码自动提交的更新
    &ndash;merges         只显示合并的提交
    -p               显示每条更新的详细信息
    &ndash;stat           显示每条更新修改的文件统计
    &ndash;dirstat        显示更新文件的目录比例
    &ndash;name-only      显示修改过的文件路径
    &ndash;oneline        只显示提交ID和提交备注
    &ndash;date={local,relative,iso,rfc,short}         格式化输出日期
        local       同本地的日期格式           Date:   Sat Sep 28 14:37:00 2013
        relative    相对于今天的日期间隔       Date:   2 weeks ago
        iso         iso标准时间                Date:   2013-09-28 14:27:08 +0800
        rfc         RFC文档标准时间            Date:   Sat, 28 Sep 2013 14:37:00 +0800
        short       精简输出                   Date:   2013-09-25
    -<n>              限制输出记录数       例如：git log -2  只显示两条记录
    &ndash;since=<date>,&ndash;after=<date> 显示指定日期后的修改  例如: git log &ndash;since=2013-09-12<br/>
    &ndash;util=<date>,&ndash;before=<date>  显示指定日期前的修改  例如: git log &ndash;util=2013-09-12<br/>
指定某天提交的（例如指定2013.09.28号的提交）
    git log &ndash;since=2013-09-27 &ndash;util=2013-09-28
    git show [log ID] 显示某</p>

<h2>8、交互式提交修改到暂存区</h2>

<pre><code>repo stage -i
</code></pre>

<h2>9、删除不追踪的多余文件</h2>

<pre><code>git clean -nd  查看执行该命令被删除的文件列表
git clean -fd  删除上一步命令显示的文件  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用命令1]]></title>
    <link href="http://blog.liao.bz/blog/2013/10/19/common-commands/"/>
    <updated>2013-10-19T16:00:00+08:00</updated>
    <id>http://blog.liao.bz/blog/2013/10/19/common-commands</id>
    <content type="html"><![CDATA[<h2>1、同步代码</h2>

<pre><code>repo start mtk --all                                          // 建立mtk分支
repo forall -c "git checkout -b elink_sw md77/elink_sw"       // 获取elink_sw分支
repo forall -c "git checkout -b  yourbranchname  elink_sw"    // 建立本地分支
</code></pre>

<p>你如果要开发新客户，请基于elink_sw分支做新的分支，例如分支newbranchname。命令</p>

<pre><code>repo forall -c "git checkout -b newbranchname elink_sw"
</code></pre>

<h2>2、查看分支</h2>

<pre><code>repo branch
</code></pre>

<h2>3、切换分支</h2>

<p>repo checkout [分支名字] 如：</p>

<pre><code>repo checkout elink_sw
</code></pre>

<!--more-->


<h2>4、把修改过的文件commit到各自的分支</h2>

<p>git commit -am [&ldquo;注释&rdquo;] 如：</p>

<pre><code>git commit -am "update some apk"
</code></pre>

<h2>5、提交代码</h2>

<p>在切换分支之前先把修改过的代码提交<br/>
先运行repo status查看自己修改过的地方，确认是否OK<br/>
然后运行repo forall -c git commit -am &ldquo;自己的注释&rdquo; 提交（如果有新增加的文件，需要进入到该文件所在的目录。 运行git add .  然后 运行 git commit -am &ldquo;自己的注释&#8221;）<br/>
提交新增的文件：<br/>
跳转到新增文件的仓库目录下面  如：cd alps/vendor/mediatek/md706/<br/>
(1)运行 git add .<br/>
(2)运行 git commit -m &#8220;注释&rdquo;</p>

<h2>6、更新代码</h2>

<p><strong>更新代码前须先提交代码</strong></p>

<ol>
<li>切换分支到mtk分支（repo checkout mtk）</li>
<li>运行 repo sync</li>
<li>切换到elink_sw分支（repo checkout elink_sw）</li>
<li>运行repo forall -c git pull md77 elink_sw</li>
<li>切换本地项目分支</li>
<li>运行repo forall -c git merge elink_sw
(如果有提示conflict，需要打开提示冲突的文件，手动处理相关文件并提交（repo forall -c git commit -am &ldquo;自己的注释&#8221;）)</li>
</ol>


<h2>7、编译代码</h2>

<p>在alps目录下面：</p>

<pre><code>cp mediatek/config/common/make_user_project.sh ./
./make_user_project.sh md706 [机型名（MD7062HC2W1）] [new | systemimage | userdataimage]
</code></pre>

<h2>8、提交删除掉的文件：</h2>

<p>切换到删除过文件的分支;如： cd alps/vendor/mediatek/md706/<br/>
逐一删除文件，命令：git rm 删除的文件;如：</p>

<pre><code>git rm artifacts/out/target/product/md706/data/app/com.adobe.reader.apk
</code></pre>

<p>所有的文件执行上面的命令之后输入 repo status会出现类似如下的情况：</p>

<pre><code>xx@elinktek:~/code/xx_repo_git/alps/vendor/mediatek/md706$ repo status
# on branch huama
project alps/vendor/mediatek/md706/             branch huama
 D-     artifacts/out/target/product/md706/data/app/aldiko.apk
 D-     artifacts/out/target/product/md706/data/app/com.adobe.reader.apk
 D-     artifacts/out/target/product/md706/data/app/documents.apk
 D-     artifacts/out/target/product/md706/data/app/flashplayer-2.apk
 D-     artifacts/out/target/product/md706/data/app/gps_test.1.2.4.apk
 D-     artifacts/out/target/product/md706/system/appbackup/aldiko.apk
 D-     artifacts/out/target/product/md706/system/appbackup/com.adobe.reader.apk
 D-     artifacts/out/target/product/md706/system/appbackup/documents.apk
 D-     artifacts/out/target/product/md706/system/appbackup/flashplayer-2.apk
 D-     artifacts/out/target/product/md706/system/appbackup/gps_test.1.2.4.apk
</code></pre>

<p>然后输入git commit -m &ldquo;注释&rdquo; 来提交</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git仓库的建立以及repo的管理]]></title>
    <link href="http://blog.liao.bz/blog/2013/10/19/build-repo-server/"/>
    <updated>2013-10-19T15:00:00+08:00</updated>
    <id>http://blog.liao.bz/blog/2013/10/19/build-repo-server</id>
    <content type="html"><![CDATA[<h2>1. repo 的安装</h2>

<p>一般服务器上都安装了git，所以只需安装repo即可<br/>
简单一点的方法，就是直接从253服务器拷贝</p>

<h3>1.1 拷贝repo脚本</h3>

<p>路径：/usr/bin/repo<br/>
拷贝到当前服务器的相同目录下，即/usr/bin</p>

<h3>1.2然后拷贝repo程序目录到当前服务器</h3>

<p>路径：elink-soft@192.168.2.253:/home/elink-soft/repo<br/>
拷贝到本地服务器任意目录<br/>
比如拷贝到/work/repo/下面</p>

<!--more-->


<h3>1.3然后用vim编辑repo脚本</h3>

<pre><code>vim /usr/bin/repo
</code></pre>

<p>修改
    REPO_URL=&lsquo;elink-soft@192.168.2.253:~/repo/repo.git&rsquo;
这句为之前repo程序目录的拷贝到的地址,如本处应改为
    REPO_URL=&lsquo;/work/repo&rsquo;</p>

<h2>2. git仓库的建立</h2>

<h3>2.1 服务器端：</h3>

<p>此端建立git仓库，用于代码的下载，提交和管理<br/>
以192.168.2.96作为管理代码的服务器，elink账户作为代码管理账户<br/>
以89代码为例：</p>

<h4>2.1.1</h4>

<p>在elink的主目录下建立mq89目录，作为仓库的存放路径（m：mtk；q：quad；89：89 series）</p>

<h4>2.1.2</h4>

<p>在mq89下面分别建立2个目录：alps、manifest.git
    mkdir alps manifest.git
    ls
    alps manifest.git</p>

<h4>2.1.3</h4>

<p>在manifest.git目录中创建空的git仓库
    git init &ndash;bare</p>

<h4>2.1.4</h4>

<p>很关键的一步，在alps下面创建**.git文件夹<br/>
规则：事先规划应该在哪些目录下面建立git仓库，以方便代码的管理。如,alps/kernel下面需要一个仓库，那么<br/>
就在alps目录下建立kernel.git目录，用于存放原始代码的远程仓库，然后初始化git，同2.3
    cd alps
    mkdir kernel.git
    git init &ndash;bare
如果是abi/cpp/下面有个git仓库<br/>
则应该递归创建目录abi/cpp.git<br/>
    cd alps
    mkdir -p abi/cpp.git
至此,服务器端的准备工作完毕</p>

<h3>2.2 本机端：</h3>

<p>此端作为原始代码的存放地，负责更新mtk的最新补丁，然后上传到服务器端<br/>
假设代码存放在mq89_std/alps目录下</p>

<h4>2.2.1</h4>

<p>创建本地的git仓库，和2.1.4的路径是相互关联<br/>
比如在服务器端有alps/kernel.git仓库<br/>
则在本地需有alps/kernel/.git仓库,即初始化git仓库是在kernel目录下<br/>
    cd alps/kernel
    git init-db
    git add .  <br/>
    git commit -am &ldquo;prompt&rdquo;                  // 双引号内为修改提交提示，比如可以将prompt改成ph init git repository
    git remote add master elink@192.168.2.98:~/mq89/alps/kernel.git  // 此句非常关键，把远程仓库和本地仓库联系起来
    git push master &ndash;all
如果是远程仓库abi/cpp.git
    cd alps/abi/cpp
    git add .  <br/>
    git commit -am &ldquo;prompt&rdquo;       <br/>
    git remote add master elink@192.168.2.98:~/mq89/alps/abi/cpp.git
    git push master &ndash;all</p>

<h4>2.2.2</h4>

<p>克隆远程manifest.git目录,在mq89_std目录下
    git clone elink@192.168.2.98:~/mq89/manifest.git
 此时
    ls mq89_std</p>

<pre><code>alps manifest
</code></pre>

<hr />

<h3>注：关于代码中哪些目录需要建立git仓库</h3>

<p>原则：为了方便以后代码的管理，如果在一个目录下拥有多个子目录，并且除去子目录以外没有其他文件，应该在各个子目录中分别建立git仓库。如，alps/mediatek的各个子目录。<br/>
还有我们应该按平台区分目录，在各个目录下创建git仓库，如，alps/mediatek/platform目录。我们应该在其下
的common和mt6589这2个目录分别建立git仓库,这样更方便以后的代码更新和管理</p>

<h2>3. repo的管理</h2>

<h3>3.1 新建default.xml文件</h3>

<p>在manifest目录下新建default.xml文件，此文件是repo管理的所有git仓库(project)<br/>
内容如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>    <span class="nt">&lt;remote</span>  <span class="na">name=</span><span class="s">&quot;alps&quot;</span>
</span><span class='line'>           <span class="na">fetch=</span><span class="s">&quot;DIR&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;default</span> <span class="na">revision=</span><span class="s">&quot;master&quot;</span>
</span><span class='line'>           <span class="na">remote=</span><span class="s">&quot;alps&quot;</span>
</span><span class='line'>           <span class="na">sync-j=</span><span class="s">&quot;4&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;project</span> <span class="na">path=</span><span class="s">&quot;alps/ndk&quot;</span> <span class="na">name=</span><span class="s">&quot;alps/ndk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>注：</h4>

<p>fetch后面的双引号填写代码存放的路径，remote name 和default remote的内容需相同，default revision指
远程的分支，这里填写的是默认分支master，sync-j表示的开启的线程数。<br/>
project内容的path变量表示本地存放的目录，name表示服务器相关git的存放路径，即DIR/alps/ndk/</p>

<h3>3.2 git add default.xml并提交</h3>

<pre><code>cd mq89_std/manifest
git add default.xml
git commit -am "prompt"
git remote add master elink@192.168.2.98:~/mq89/manifest.git
git push master --all
</code></pre>

<h4>注：每次的更改都需要提交default.xml文件</h4>

<h2>4. 客户端的下载</h2>

<p>比如下载到repo-client文件夹中
    cd repo-client
    repo init -u [repo-server&rsquo;s directory]/manifest.git
    repo sync
即可以下载完成</p>

<h2>5. 关于copyfile的使用</h2>

<p>前面有提到过git仓库创建的原则，比如alps/mediatek/platform目录下，需要对common和mt6589，2个目录各创建一个git仓库，但是在alps/mediatek/platform下存在Android.mk和rules.mk 文件，如果只在common和mt6589这2个目录中建立仓库则会导致无法下载这2个mk文件，所以推荐的方法是在alps/mediatek/platform下面创建目录mtk，并将Android.mk和rules.mk这2个文件复制过去，下载的时候就可以通过copyfile去实现了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">path=</span><span class="s">&quot;alps/mediatek/platform/mtk&quot;</span> <span class="na">name=</span><span class="s">&quot;alps/mediatek/platform/mtk/&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;Android.mk&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/mediatek/platform/Android.mk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;rules.mk&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/mediatek/platform/rules.mk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>同理alps下面的几个文件也是一样的情况，可以在build中穿件mtk文件夹</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">path=</span><span class="s">&quot;alps/build&quot;</span> <span class="na">name=</span><span class="s">&quot;alps/build/&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;mtk/Makefile&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/Makefile&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;mtk/makeMtk&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/makeMtk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;mtk/mbldenv.sh&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/mbldenv.sh&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;mtk/mk&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/mk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repo添加project后补全本地分支]]></title>
    <link href="http://blog.liao.bz/blog/2013/10/18/repo-project-add-local-branch-doc/"/>
    <updated>2013-10-18T15:00:00+08:00</updated>
    <id>http://blog.liao.bz/blog/2013/10/18/repo-project-add-local-branch-doc</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>在repo的服务器端添加新project时(例如添加了MD900项目),本地完成同步后执行repo branch会碰到下面的情况:
    liaobz@elink:~/code/md77$ repo branch
       elink_sw                  | not in:
                                       alps/mediatek/config/md900
                                       alps/mediatek/custom/md900
                                       alps/vendor/mediatek/md900
    *  mtk                       | not in:
                                       alps/mediatek/config/md900
                                       alps/mediatek/custom/md900
                                       alps/vendor/mediatek/md900
碰到上面的情况的原因是新添加的repo project在本地没有创建本地分支,所以我们需要手动补全本地分支.</p>

<!--more-->


<h2>补全mtk分支</h2>

<p>mtk分支是在执行repo start mtk &ndash;all之后生成的分支，所以可以通过repo start mtk &ndash;all补全分支，也可执行repo start mtk [projectName]建立mtk分支，如
    liaobz@elink:~/code/md77$ repo start mtk &ndash;all
或
    liaobz@elink:~/code/md77$ repo start mtk alps/mediatek/config/md900
    liaobz@elink:~/code/md77$ repo start mtk alps/mediatek/custom/md900
    liaobz@elink:~/code/md77$ repo start mtk alps/vendor/mediatek/md900
完成上述步骤之后结果如下:
    liaobz@elink:~/code/md77$ repo branch
       elink_sw                  | not in:
                                       alps/mediatek/config/md900
                                       alps/mediatek/custom/md900
                                       alps/vendor/mediatek/md900
    *  mtk                       | in all projects</p>

<h2>补全elink_sw分支</h2>

<p>elink_sw分支是通过repo forall -c git checkout -b elink_sw md77/elink_sw命令创建的分支，所以可以再次执行此命令补全分支
    liaobz@elink:~/code/md77$ repo forall -c git checkout -b elink_sw md77/elink_sw
结果会有两类
    fatal: git checkout: branch elink_sw already exists
    Branch elink_sw set up to track remote branch elink_sw from md77.
或
    Switched to a new branch &lsquo;elink_sw&rsquo;
两种均是正常结果.<br/>
如果过程完全正常,就会得到以下结果
    liaobz@elink:~/code/md77$ repo branch
    *  elink_sw                  | in all projects</p>

<pre><code>   mtk                       | in all projects
</code></pre>

<hr />

<h2>补充一:</h2>

<p>在尝试补全elink_sw分支,可能会得到以下两种结果
    fatal: git checkout: branch elink_sw already exists
    Branch elink_sw set up to track remote branch elink_sw from md77.
或
    fatal: git checkout: updating paths is incompatible with switching branches.
    Did you intend to checkout &lsquo;md77/elink_sw&rsquo; which can not be resolved as commit?
前一种提示可以忽略,后一种提示是因为服务器端尚未创建elink_sw分支,请联系代码管理员并晚些时候再尝试同步elink_sw分支.</p>

<h2>补充二:</h2>

<p>本地的其他工作分支请执行以下命令补全
    repo forall -c git checkout -b local_branch elink_sw</p>

<h2>补充三:</h2>

<p>若出现以下提示
    fatal: git checkout: updating paths is incompatible with switching branches.
    Did you intend to checkout &lsquo;md77/elink_sw&rsquo; which can not be resolved as commit?
请重新sync之后再补全elink_sw分支
    repo checkout mtk
    repo sync</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[往服务器上push代码流程]]></title>
    <link href="http://blog.liao.bz/blog/2013/09/28/push-doc/"/>
    <updated>2013-09-28T18:04:00+08:00</updated>
    <id>http://blog.liao.bz/blog/2013/09/28/push-doc</id>
    <content type="html"><![CDATA[<h2>1.本地合成、测试及提交</h2>

<h3>1).本地合成与测试</h3>

<p>  所有的补丁都须在自己的分支上合成,假设本地分支名为patch<br/>
  在工作目录执行repo branch,所示结果如下: (*  patch表示当前所在为patch)</p>

<pre><code>lbz@elink:~/work/project/md77$ repo branch
   elink_sw                  | in all projects
   mtk                       | in all projects
*  patch                     | in all projects
</code></pre>

<!--more-->


<h3>2).本地提交</h3>

<p>  在所有补丁都测试完毕后,执行repo status<br/>
  所示结果如下:</p>

<pre><code>lbz@elink:~/work/project/md77$ repo status
# on branch patch
project alps/mediatek/config/md790/             branch patch
 -m     ProjectConfig.mk
project alps/mediatek/custom/common/            branch patch
 --     kernel/lcm/md970_lvds/md970_lvds.c
</code></pre>

<p>  根据上述结果可知:<br/>
  a.在alps/mediatek/config/md790/下修改了ProjectConfig.mk文件<br/>
  b.在alps/mediatek/custom/common/添加了kernel/lcm/md970_lvds/md970_lvds.c文件</p>

<p>  则可以用如下方式提交</p>

<h4>a.提交对ProjectConfig.mk文件的修改</h4>

<p>  (如果只是对文件修改,git commit -am &ldquo;注释&#8221;等价于执行git add 和 git commit两条命令)<br/>
    lbz@elink:~/work/project/md77$ cd alps/mediatek/config/md790/
    lbz@elink:~/work/project/md77/alps/mediatek/config/md790$ git commit -am &#8220;update ProjectConfig.mk&rdquo;</p>

<h4>b.提交对kernel/lcm/md970_lvds/md970_lvds.c文件的添加</h4>

<p>  (不可通过git commit -am &ldquo;注释&#8221;来提交,须单独git add命令)<br/>
    lbz@elink:~/work/project/md77$ cd alps/mediatek/custom/common/
    lbz@elink:~/work/project/md77/alps/mediatek/custom/common$ git add kernel/lcm/md970_lvds/md970_lvds.c
    lbz@elink:~/work/project/md77/alps/mediatek/custom/common$ git commit -m &#8220;add md970_lvds.c&rdquo;</p>

<p>  至此,本地分支的提交结束</p>

<h2>2.远程分支的拉取及与本地分支的合并</h2>

<p>  考虑到不同人可能会对同一文件进行修改从而导致修改冲突,所以所有冲突必须在本地解决之后才能执行push操作</p>

<h3>1).远程分支的拉取</h3>

<p>  拉取分支先须切换到mtk分支执行repo sync命令,然后执行切换到elink_sw分支执行pull操作</p>

<h4>a.repo sync</h4>

<p>  (repo sync的输出内容与更新内容的多少有变更)<br/>
    lbz@elink:~/work/project/md77$ repo checkout mtk
    Checkout mtk: 100% (424/424), done.<br/>
    liaobz@elink-soft-desktop:~/work/project/md77$ repo sync
    Fetching projects: 100% (424/424), done.
    Syncing work tree: 100% (424/424), done.</p>

<h4>b.拉取远程代码</h4>

<pre><code>lbz@elink:~/work/project/md77$ repo checkout elink_sw
Checkout elink_sw: 100% (424/424), done.  
lbz@elink:~/work/project/md77$ repo forall -c git pull md77 elink_sw
</code></pre>

<h3>2).本地分支的合并</h3>

<p>  合并代码的时候须先切换到本地分支再进行git merge操作<br/>
    lbz@elink:~/work/project/md77$ repo checkout patch
    Checkout patch: 100% (424/424), done.<br/>
    lbz@elink:~/work/project/md77$ repo forall -c git merge elink_sw</p>

<p>  注意输出内容,如果提到有冲突(conflict),须手动处理<br/>
  (过程暂略)</p>

<p>  <strong>!重要:须在合并完后再次测试,保证所做的更改未受合并影响</strong></p>

<h2>3.提交到远程elink_preview分支</h2>

<pre><code>git push md77 patch:elink_preview
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elink 代码规范]]></title>
    <link href="http://blog.liao.bz/blog/2013/09/03/elink-code-server-guide2/"/>
    <updated>2013-09-03T18:05:00+08:00</updated>
    <id>http://blog.liao.bz/blog/2013/09/03/elink-code-server-guide2</id>
    <content type="html"><![CDATA[<h2>1：机型命名：</h2>

<p>Elink 软件机型由内部自己定义，不和外部的外壳等等有关联。遵循简单、规律、好记的原则。<br/>
具体命名规则，请参考《Elink 机型命名规则》，项目前立项时，由项目经理提供配置单给蔡锦涛负责命名。<br/>
在代码里面，请给与变量PRODUCT_MODEL赋值，例如</p>

<pre><code>PRODUCT_MODEL=MD7065HC
</code></pre>

<p>那么系统标准的属性,ro.product.model会变赋值为</p>

<pre><code>ro.product.model=MD7065HC  
</code></pre>

<h2>2：软件版本号命名：</h2>

<p>软件版本号分为两个版本，一个是中性版本号，一个是生成版本号。</p>

<!--more-->


<ul>
<li><p>中性版本号：
为了标示当前中性代码的版本情况，不随编译日期而改变，一般不随版型机型而变化，影响整份代码，一般不包含客户需求，乃Elink标准软件。<br/>
给属性ro.custom.build.version赋值即可，例如：</p>

<p>  ro.custom.build.version=1.22_20130903
这个版本号还和Readme对应起来，还和代码的TAG对应起来，便于管理。</p></li>
<li><p>生成版本号
表示软件工程师制作出来的软件版本号命名，和具体的版型机型有关，还和编译日期有关。<br/>
例如：<br/>
规则为：芯片<em>版型</em>机型_(客户单号).YYYYMMDD<br/>
例如标准软件：MT77_MD7062HC1.20130903<br/>
例如客制软件：MT77_MD7062HC1_123456.20130903<br/>
它影响的属性为：
  ro.build.display.id</p></li>
</ul>


<h2>3：代码分支管理：</h2>

<p>一般代码，我们有以下几种情况：</p>

<ol>
<li>我们自己拿到的代码创建的仓库，我们简称为mtk分支，对应远程分支master。</li>
<li>Elink标准代码分支， 我们简称为elink_sw分支，一般对应远程分支为elink_sw分支。

<h2>4：目前代码管理存在的问题点：</h2>

<p>问题1：不同中性版本号之前的差异，无法快速切换？
解决方案：使用git tag.<br/>
每个repo 中的每个git使用一个tag，这个tag,使用中性版本号来表示，例如<br/>
当MT6577的代码，使用了1.22_20130903这个版本号，还需要在push上之前，打上这个tag信息。</p></li>
</ol>


<p>使用方法：</p>

<pre><code>git tag 1.22_20130903
</code></pre>

<p>简单操作如下：</p>

<pre><code>repo checkout elink_sw
repo forall -c git tag 1.22_20130903
repo forall -c git push remotegitname elink_sw：elink_sw   //推代码到指定分支上去。
repo forall -c git push remotegitname 1.22_20130903
</code></pre>

<p>具体请参考：<br/>
git的tag，跟分支一样简单。<br/>
每次上线养成打tag好习惯 :)</p>

<pre><code>$: git tag 1.22_20130903_publish
</code></pre>

<p>加上-f覆盖原有的tag</p>

<pre><code>$: git tag -f 1.22_20130903_publish
</code></pre>

<p>显示所有的tag</p>

<pre><code>$: git tag
1.22_20130903_publish
1.22_20130903_publish
1.22_20130903_publish
</code></pre>

<p>删除tag</p>

<pre><code>$: git tag -d 1.22_20130903_publish
</code></pre>

<p>tag要push上服务器，操作跟分支操作没有任何区别</p>

<ul>
<li><p>push 到服务器 *</p>

<p>  $: git push origin 1.22_20130903_publish
*从服务器上删除</p>

<p>  $: git push origin :1.22_20130903_publish
具体详细，可以参考git tag的帮助，或者参考其他资料获取。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elink-code-server-guide]]></title>
    <link href="http://blog.liao.bz/blog/2013/09/03/elink-code-server-guide1/"/>
    <updated>2013-09-03T18:04:00+08:00</updated>
    <id>http://blog.liao.bz/blog/2013/09/03/elink-code-server-guide1</id>
    <content type="html"><![CDATA[<p>目前已经搭建好代码服务器，后续的项目中使用git作为代码管理。请大家了解。<br/>
使用说明：<br/>
我们使用ssh来作为git通讯的协议。所以也使用ssh key 来授权和管理。<br/>
静态IP地址为192.168.2.96</p>

<h2>1：建立ssh key</h2>

<p>首先检查 ls -l ~/.ssh,看有无id_rsa 和id_rsa.pub文件。<br/>
如果没有，请键入ssh-keygen，然后一直回车，保持默认值。<br/>
如下所示：</p>

<p>然后请把id_rsa.pub文件更名为id_rsa.pub_yourname通过Email发送给LBZ。</p>

<!--more-->


<p>注：在git服务器端使用</p>

<pre><code>cat id_rsa.pub_paul &gt;&gt; .ssh/authorized_keys  
</code></pre>

<p>把用户的公钥放在服务器上，这样你就可以用自己的私钥id_rsa来访问了。这个就是原理。</p>

<h2>2：配置git</h2>

<p>git不欢迎没有name &amp; email的陌生人。<br/>
请使用</p>

<pre><code>git config --global user.name
git config --global user.email 
</code></pre>

<p>来简单配置下git.<br/>
另外最重要的是学习git的使用。</p>

<h2>3. 下载代码：</h2>

<p>1> MT6577</p>

<pre><code>repo init -u elink-code-server@192.168.2.96:/elink_code/sda/md77/manifest.git
repo sync
</code></pre>

<p>2> MT6589</p>

<pre><code>repo init -u elink-code-server@192.168.2.96:/elink_code/sda/mq89/manifest.git
repo sync
</code></pre>

<h2>4：管理代码：</h2>

<p>我们会建立三个分支，<br/>
分支mtk，为mtk原始的source.<br/>
分支elink_sw ，为我们公版的稳定版本的source.<br/>
分支yourbranchname ,为个人开发使用的版本,请更改名字，例如paul。</p>

<p>拿到代码后，请执行以下操作</p>

<pre><code>repo start mtk --all                                          //建立mtk分支
repo forall -c "git checkout -b elink_sw md77/elink_sw"       //获取elink_sw分支
repo forall -c "git checkout -b yourbranchname elink_sw"
</code></pre>

<p>!ok，你现在可以在你自己的yourbranchname上开发了。<br/>
<strong>注意一下操作：</strong><br/>
1. 你如果要开发新客户，请基于elink_sw分支做新的分支，例如分支newbranchname。命令 repo forall -c &ldquo;git checkout -b newbranchname elink_sw&rdquo;<br/>
2. 如果elink_sw有更新，请先切换到elink_sw分支，然后执行repo forall -c &ldquo;git pull remoteG remotebranchname&rdquo;<br/>
其中 remoteG表示的是远程仓库名，remotebranchname代表的是远程分支名。<br/>
3. 如果有你补丁确认后，需要上传到服务器，请再自己的分支确认后，然后更新到elink_sw分支。<br/>
然后在inet_team分支上，操作 repo forall -c &ldquo;git push remote_res_name elink_sw:elink_preview&rdquo;<br/>
即：</p>

<pre><code>repo forall -c "git push md77 elink_sw:elink_preview"
</code></pre>

<p>上传代码，会影响到所有的同事，所以请确认后再上传,谁上传谁负责。</p>

<h2>5：编译代码：</h2>

<pre><code>make_user_project.sh
make_project.sh
</code></pre>

<p>这样实现代码和配置的分开选择，但是一个命令搞定。<br/>
请大家使用新的脚本。<br/>
实现软件基础部分不动，用户的配置共用。<br/>
即可编译。<br/>
后续，我们陆续减少客户的代码公共部分的修改，减少打包时版型配置部分的影响，请各位浏览下目前的代码结构。<br/>
如果客户有比较多的源码修改，建议使用新的branch.基于elink_sw版本。后续elink_sw有更新，只需要merge elink_sw就可以。</p>
]]></content>
  </entry>
  
</feed>
