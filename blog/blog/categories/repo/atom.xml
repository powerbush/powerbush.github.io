<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Repo | liao.bz]]></title>
  <link href="http://blog.liao.bz//blog/categories/repo/atom.xml" rel="self"/>
  <link href="http://blog.liao.bz//"/>
  <updated>2014-12-17T16:25:11+08:00</updated>
  <id>http://blog.liao.bz//</id>
  <author>
    <name><![CDATA[liaobz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[常用命令2]]></title>
    <link href="http://blog.liao.bz//blog/2013/10/19/git-common-commands/"/>
    <updated>2013-10-19T17:00:00+08:00</updated>
    <id>http://blog.liao.bz//blog/2013/10/19/git-common-commands</id>
    <content type="html"><![CDATA[<h2>1、查看分支</h2>

<pre><code>repo branch 分支名前有个星号且显示为绿色 表示现在所在分支
</code></pre>

<h2>2、切换分支</h2>

<pre><code>repo checkout [分支名字] 如：repo checkout elink_sw  
</code></pre>

<p>※注：切换分支前务必提交先所在分支的所有修改<br/>
如切换分支后出现两个或多个绿色分支名代表切换前的分支有修改未提交，重新切换回之前的分支完成提交再切换</p>

<h2>3、 撤销分支</h2>

<pre><code>repo abandon  [分支名字]  
</code></pre>

<p>如: repo abandon vido</p>

<h2>4、分支重命名</h2>

<pre><code>repo forall -c git branch -m [分支名]
</code></pre>

<!--more-->


<h2>5、 撤销恢复状态</h2>

<pre><code>HEAD  指向最后一次提交的状态
git reset --hard HEAD   恢复到最后一次提交 log 的状态  
</code></pre>

<p>※注意:此操作会覆盖所有未提交的修改 如不小心覆盖 请使用git reflog 恢复
    git reset &ndash;soft [log ID]  恢复到指定ID状态，该ID之前的状态保存到暂存区<br/>
例如 log1  log2  log3 恢复到log3 则log2 log1的修改保存在暂存区 &ndash;hard则直接清除log2 log1
    git reset &ndash;mixed（默认不加）  恢复到指定ID状态，该ID之前的状态保存到工作区区<br/>
例如 log1  log2  log3 恢复到log3 则log2 log1的修改保存在工作区</p>

<h2>6、查看状态</h2>

<pre><code>repo status 迭代查看所有git项目状态  
git status  查看项目状态  
git status -s 简化输出

- 表示没有改变的文件
M 表示修改过的文件
A 表示新添加的文件
D 表示被删除的文件
R 表示被重命名的文件
C 表示复制的文件
</code></pre>

<h2>7、查看提交日志</h2>

<p>git log  显示提交的更新 默认显示提交者 提交时间 提交备注<br/>
   参数
    &ndash;author=xxxx    显示某个提交者提交的更新
    &ndash;no-merges      不显示合并代码自动提交的更新
    &ndash;merges         只显示合并的提交
    -p               显示每条更新的详细信息
    &ndash;stat           显示每条更新修改的文件统计
    &ndash;dirstat        显示更新文件的目录比例
    &ndash;name-only      显示修改过的文件路径
    &ndash;oneline        只显示提交ID和提交备注
    &ndash;date={local,relative,iso,rfc,short}         格式化输出日期
        local       同本地的日期格式           Date:   Sat Sep 28 14:37:00 2013
        relative    相对于今天的日期间隔       Date:   2 weeks ago
        iso         iso标准时间                Date:   2013-09-28 14:27:08 +0800
        rfc         RFC文档标准时间            Date:   Sat, 28 Sep 2013 14:37:00 +0800
        short       精简输出                   Date:   2013-09-25
    -<n>              限制输出记录数       例如：git log -2  只显示两条记录
    &ndash;since=<date>,&ndash;after=<date> 显示指定日期后的修改  例如: git log &ndash;since=2013-09-12<br/>
    &ndash;util=<date>,&ndash;before=<date>  显示指定日期前的修改  例如: git log &ndash;util=2013-09-12<br/>
指定某天提交的（例如指定2013.09.28号的提交）
    git log &ndash;since=2013-09-27 &ndash;util=2013-09-28
    git show [log ID] 显示某</p>

<h2>8、交互式提交修改到暂存区</h2>

<pre><code>repo stage -i
</code></pre>

<h2>9、删除不追踪的多余文件</h2>

<pre><code>git clean -nd  查看执行该命令被删除的文件列表
git clean -fd  删除上一步命令显示的文件  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用命令1]]></title>
    <link href="http://blog.liao.bz//blog/2013/10/19/common-commands/"/>
    <updated>2013-10-19T16:00:00+08:00</updated>
    <id>http://blog.liao.bz//blog/2013/10/19/common-commands</id>
    <content type="html"><![CDATA[<h2>1、同步代码</h2>

<pre><code>    repo start mtk --all                                          // 建立mtk分支
    repo forall -c "git checkout -b elink_sw md77/elink_sw"       // 获取elink_sw分支
    repo forall -c "git checkout -b  yourbranchname  elink_sw"    // 建立本地分支
</code></pre>

<p>你如果要开发新客户，请基于elink_sw分支做新的分支，例如分支newbranchname。命令
<code>
    repo forall -c "git checkout -b newbranchname elink_sw"
</code></p>

<h2>2、查看分支</h2>

<pre><code>    repo branch
</code></pre>

<h2>3、切换分支</h2>

<p>repo checkout [分支名字] 如：
<code>
    repo checkout elink_sw
</code></p>

<!--more-->


<h2>4、把修改过的文件commit到各自的分支</h2>

<p>git commit -am [&ldquo;注释&rdquo;] 如：
<code>
    git commit -am "update some apk"
</code></p>

<h2>5、提交代码</h2>

<p>在切换分支之前先把修改过的代码提交<br/>
先运行repo status查看自己修改过的地方，确认是否OK<br/>
然后运行repo forall -c git commit -am &ldquo;自己的注释&rdquo; 提交（如果有新增加的文件，需要进入到该文件所在的目录。 运行git add .  然后 运行 git commit -am &ldquo;自己的注释&#8221;）<br/>
提交新增的文件：<br/>
跳转到新增文件的仓库目录下面  如：cd alps/vendor/mediatek/md706/<br/>
(1)运行 git add .<br/>
(2)运行 git commit -m &#8220;注释&rdquo;</p>

<h2>6、更新代码</h2>

<p><strong>更新代码前须先提交代码</strong></p>

<ol>
<li>切换分支到mtk分支（repo checkout mtk）</li>
<li>运行 repo sync</li>
<li>切换到elink_sw分支（repo checkout elink_sw）</li>
<li>运行repo forall -c git pull md77 elink_sw</li>
<li>切换本地项目分支</li>
<li>运行repo forall -c git merge elink_sw
(如果有提示conflict，需要打开提示冲突的文件，手动处理相关文件并提交（repo forall -c git commit -am &ldquo;自己的注释&#8221;）)</li>
</ol>


<h2>7、编译代码</h2>

<p>在alps目录下面：
<code>
    cp mediatek/config/common/make_user_project.sh ./
    ./make_user_project.sh md706 [机型名（MD7062HC2W1）] [new | systemimage | userdataimage]
</code></p>

<h2>8、提交删除掉的文件：</h2>

<p>切换到删除过文件的分支;如： cd alps/vendor/mediatek/md706/<br/>
逐一删除文件，命令：git rm 删除的文件;如：
<code>
    git rm artifacts/out/target/product/md706/data/app/com.adobe.reader.apk
</code>
所有的文件执行上面的命令之后输入 repo status会出现类似如下的情况：
<code>
    xx@elinktek:~/code/xx_repo_git/alps/vendor/mediatek/md706$ repo status
    # on branch huama
    project alps/vendor/mediatek/md706/             branch huama
     D-     artifacts/out/target/product/md706/data/app/aldiko.apk
     D-     artifacts/out/target/product/md706/data/app/com.adobe.reader.apk
     D-     artifacts/out/target/product/md706/data/app/documents.apk
     D-     artifacts/out/target/product/md706/data/app/flashplayer-2.apk
     D-     artifacts/out/target/product/md706/data/app/gps_test.1.2.4.apk
     D-     artifacts/out/target/product/md706/system/appbackup/aldiko.apk
     D-     artifacts/out/target/product/md706/system/appbackup/com.adobe.reader.apk
     D-     artifacts/out/target/product/md706/system/appbackup/documents.apk
     D-     artifacts/out/target/product/md706/system/appbackup/flashplayer-2.apk
     D-     artifacts/out/target/product/md706/system/appbackup/gps_test.1.2.4.apk
</code>
然后输入git commit -m &ldquo;注释&rdquo; 来提交</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git仓库的建立以及repo的管理]]></title>
    <link href="http://blog.liao.bz//blog/2013/10/19/build-repo-server/"/>
    <updated>2013-10-19T15:00:00+08:00</updated>
    <id>http://blog.liao.bz//blog/2013/10/19/build-repo-server</id>
    <content type="html"><![CDATA[<h2>1. repo 的安装</h2>

<p>一般服务器上都安装了git，所以只需安装repo即可<br/>
简单一点的方法，就是直接从253服务器拷贝</p>

<h3>1.1 拷贝repo脚本</h3>

<p>路径：/usr/bin/repo<br/>
拷贝到当前服务器的相同目录下，即/usr/bin</p>

<h3>1.2然后拷贝repo程序目录到当前服务器</h3>

<p>路径：elink-soft@192.168.2.253:/home/elink-soft/repo<br/>
拷贝到本地服务器任意目录<br/>
比如拷贝到/work/repo/下面</p>

<!--more-->


<h3>1.3然后用vim编辑repo脚本</h3>

<pre><code>    vim /usr/bin/repo
</code></pre>

<p>修改
<code>
    REPO_URL='elink-soft@192.168.2.253:~/repo/repo.git'
</code>
这句为之前repo程序目录的拷贝到的地址,如本处应改为
<code>
    REPO_URL='/work/repo'
</code></p>

<h2>2. git仓库的建立</h2>

<h3>2.1 服务器端：</h3>

<p>此端建立git仓库，用于代码的下载，提交和管理<br/>
以192.168.2.96作为管理代码的服务器，elink账户作为代码管理账户<br/>
以89代码为例：</p>

<h4>2.1.1</h4>

<p>在elink的主目录下建立mq89目录，作为仓库的存放路径（m：mtk；q：quad；89：89 series）</p>

<h4>2.1.2</h4>

<p>在mq89下面分别建立2个目录：alps、manifest.git
<code>
    mkdir alps manifest.git
    ls
    alps manifest.git
</code></p>

<h4>2.1.3</h4>

<p>在manifest.git目录中创建空的git仓库
<code>
    git init --bare
</code></p>

<h4>2.1.4</h4>

<p>很关键的一步，在alps下面创建**.git文件夹<br/>
规则：事先规划应该在哪些目录下面建立git仓库，以方便代码的管理。如,alps/kernel下面需要一个仓库，那么<br/>
就在alps目录下建立kernel.git目录，用于存放原始代码的远程仓库，然后初始化git，同2.3
<code>
    cd alps
    mkdir kernel.git
    git init --bare
</code>
如果是abi/cpp/下面有个git仓库<br/>
则应该递归创建目录abi/cpp.git<br/>
<code>
    cd alps
    mkdir -p abi/cpp.git
</code>
至此,服务器端的准备工作完毕</p>

<h3>2.2 本机端：</h3>

<p>此端作为原始代码的存放地，负责更新mtk的最新补丁，然后上传到服务器端<br/>
假设代码存放在mq89_std/alps目录下</p>

<h4>2.2.1</h4>

<p>创建本地的git仓库，和2.1.4的路径是相互关联<br/>
比如在服务器端有alps/kernel.git仓库<br/>
则在本地需有alps/kernel/.git仓库,即初始化git仓库是在kernel目录下<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>alps/kernel
</span><span class='line'>git init-db
</span><span class='line'>git add .
</span><span class='line'>// 双引号内为修改提交提示，比如可以将prompt改成ph init git repository
</span><span class='line'>git commit -am <span class="p">&amp;</span>ldquo<span class="p">;</span>prompt<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>// 此句非常关键，把远程仓库和本地仓库联系起来
</span><span class='line'>git remote add master elink@192.168.2.98:~/mq89/alps/kernel.git&lt;br/&gt;
</span><span class='line'>git push master <span class="p">&amp;</span>ndash<span class="p">;</span>all
</span></code></pre></td></tr></table></div></figure>
如果是远程仓库abi/cpp.git
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nb">cd </span>alps/abi/cpp
</span><span class='line'>    git add .
</span><span class='line'>    git commit -am <span class="p">&amp;</span>ldquo<span class="p">;</span>prompt<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>    git remote add master elink@192.168.2.98:~/mq89/alps/abi/cpp.git
</span><span class='line'>    git push master <span class="p">&amp;</span>ndash<span class="p">;</span>all
</span></code></pre></td></tr></table></div></figure></p>

<h4>2.2.2</h4>

<p>克隆远程manifest.git目录,在mq89_std目录下
<code>
    git clone elink@192.168.2.98:~/mq89/manifest.git
</code>
 此时
&#8220;`
    ls mq89_std
    alps manifest</p>

<pre><code>---
###注：关于代码中哪些目录需要建立git仓库
原则：为了方便以后代码的管理，如果在一个目录下拥有多个子目录，并且除去子目录以外没有其他文件，应该在各个子目录中分别建立git仓库。如，alps/mediatek的各个子目录。  
还有我们应该按平台区分目录，在各个目录下创建git仓库，如，alps/mediatek/platform目录。我们应该在其下
的common和mt6589这2个目录分别建立git仓库,这样更方便以后的代码更新和管理  
##3. repo的管理
###3.1 新建default.xml文件
在manifest目录下新建default.xml文件，此文件是repo管理的所有git仓库(project)  
内容如下:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>manifest<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>remote  name=&quot;alps&quot;
</span><span class='line'>           fetch=&quot;DIR&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>default revision=&quot;master&quot;
</span><span class='line'>           remote=&quot;alps&quot;
</span><span class='line'>           sync-j=&quot;4&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>project path=&quot;alps/ndk&quot; name=&quot;alps/ndk&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/manifest<span class="ni">&amp;gt;</span>
</span></code></pre></td></tr></table></div></figure>
####注：
fetch后面的双引号填写代码存放的路径，remote name 和default remote的内容需相同，default revision指
远程的分支，这里填写的是默认分支master，sync-j表示的开启的线程数。  
project内容的path变量表示本地存放的目录，name表示服务器相关git的存放路径，即DIR/alps/ndk/
###3.2 git add default.xml并提交
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>mq89_std/manifest
</span><span class='line'>git add default.xml
</span><span class='line'>git commit -am <span class="s2">&quot;prompt&quot;</span>
</span><span class='line'>git remote add master elink@192.168.2.98:~/mq89/manifest.git
</span><span class='line'>git push master --all
</span></code></pre></td></tr></table></div></figure>
####注：每次的更改都需要提交default.xml文件
##4. 客户端的下载
比如下载到repo-client文件夹中
</code></pre>

<pre><code>cd repo-client
repo init -u [repo-server's directory]/manifest.git
repo sync
</code></pre>

<p>&#8220;`
即可以下载完成</p>

<h2>5. 关于copyfile的使用</h2>

<p>前面有提到过git仓库创建的原则，比如alps/mediatek/platform目录下，需要对common和mt6589，2个目录各创建一个git仓库，但是在alps/mediatek/platform下存在Android.mk和rules.mk 文件，如果只在common和mt6589这2个目录中建立仓库则会导致无法下载这2个mk文件，所以推荐的方法是在alps/mediatek/platform下面创建目录mtk，并将Android.mk和rules.mk这2个文件复制过去，下载的时候就可以通过copyfile去实现了
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">path=</span><span class="s">&quot;alps/mediatek/platform/mtk&quot;</span> <span class="na">name=</span><span class="s">&quot;alps/mediatek/platform/mtk/&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;Android.mk&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/mediatek/platform/Android.mk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;rules.mk&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/mediatek/platform/rules.mk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>
同理alps下面的几个文件也是一样的情况，可以在build中穿件mtk文件夹
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">path=</span><span class="s">&quot;alps/build&quot;</span> <span class="na">name=</span><span class="s">&quot;alps/build/&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;mtk/Makefile&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/Makefile&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;mtk/makeMtk&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/makeMtk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;mtk/mbldenv.sh&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/mbldenv.sh&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyfile</span> <span class="na">src=</span><span class="s">&quot;mtk/mk&quot;</span> <span class="na">dest=</span><span class="s">&quot;alps/mk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repo添加project后补全本地分支]]></title>
    <link href="http://blog.liao.bz//blog/2013/10/18/repo-project-add-local-branch-doc/"/>
    <updated>2013-10-18T15:00:00+08:00</updated>
    <id>http://blog.liao.bz//blog/2013/10/18/repo-project-add-local-branch-doc</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>在repo的服务器端添加新project时(例如添加了MD900项目),本地完成同步后执行repo branch会碰到下面的情况:</p>

<pre><code>liaobz@elink:~/code/md77$ repo branch
   elink_sw                  | not in:
                                   alps/mediatek/config/md900
                                   alps/mediatek/custom/md900
                                   alps/vendor/mediatek/md900
*  mtk                       | not in:
                                   alps/mediatek/config/md900
                                   alps/mediatek/custom/md900
                                   alps/vendor/mediatek/md900
</code></pre>

<p>碰到上面的情况的原因是新添加的repo project在本地没有创建本地分支,所以我们需要手动补全本地分支.</p>

<!--more-->


<h2>补全mtk分支</h2>

<p>mtk分支是在执行repo start mtk &ndash;all之后生成的分支，所以可以通过repo start mtk &ndash;all补全分支，也可执行repo start mtk [projectName]建立mtk分支，如</p>

<pre><code>liaobz@elink:~/code/md77$ repo start mtk --all
</code></pre>

<p>或</p>

<pre><code>liaobz@elink:~/code/md77$ repo start mtk alps/mediatek/config/md900
liaobz@elink:~/code/md77$ repo start mtk alps/mediatek/custom/md900
liaobz@elink:~/code/md77$ repo start mtk alps/vendor/mediatek/md900
</code></pre>

<p>完成上述步骤之后结果如下:</p>

<pre><code>liaobz@elink:~/code/md77$ repo branch
   elink_sw                  | not in:
                                   alps/mediatek/config/md900
                                   alps/mediatek/custom/md900
                                   alps/vendor/mediatek/md900
*  mtk                       | in all projects
</code></pre>

<h2>补全elink_sw分支</h2>

<p>elink_sw分支是通过repo forall -c git checkout -b elink_sw md77/elink_sw命令创建的分支，所以可以再次执行此命令补全分支</p>

<pre><code>liaobz@elink:~/code/md77$ repo forall -c git checkout -b elink_sw md77/elink_sw
</code></pre>

<p>结果会有两类</p>

<pre><code>fatal: git checkout: branch elink_sw already exists
Branch elink_sw set up to track remote branch elink_sw from md77.
</code></pre>

<p>或
    Switched to a new branch &lsquo;elink_sw&rsquo;
两种均是正常结果.<br/>
如果过程完全正常,就会得到以下结果</p>

<pre><code>liaobz@elink:~/code/md77$ repo branch
*  elink_sw                  | in all projects
   mtk                       | in all projects
</code></pre>

<hr />

<h2>补充一:</h2>

<p>在尝试补全elink_sw分支,可能会得到以下两种结果</p>

<pre><code>fatal: git checkout: branch elink_sw already exists
Branch elink_sw set up to track remote branch elink_sw from md77.
</code></pre>

<p>或</p>

<pre><code>fatal: git checkout: updating paths is incompatible with switching branches.
Did you intend to checkout 'md77/elink_sw' which can not be resolved as commit?
</code></pre>

<p>前一种提示可以忽略,后一种提示是因为服务器端尚未创建elink_sw分支,请联系代码管理员并晚些时候再尝试同步elink_sw分支.</p>

<h2>补充二:</h2>

<p>本地的其他工作分支请执行以下命令补全</p>

<pre><code>repo forall -c git checkout -b local_branch elink_sw
</code></pre>

<h2>补充三:</h2>

<p>若出现以下提示</p>

<pre><code>fatal: git checkout: updating paths is incompatible with switching branches.
Did you intend to checkout 'md77/elink_sw' which can not be resolved as commit?
</code></pre>

<p>请重新sync之后再补全elink_sw分支</p>

<pre><code>repo checkout mtk
repo sync
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[往服务器上push代码流程]]></title>
    <link href="http://blog.liao.bz//blog/2013/09/28/push-doc/"/>
    <updated>2013-09-28T18:04:00+08:00</updated>
    <id>http://blog.liao.bz//blog/2013/09/28/push-doc</id>
    <content type="html"><![CDATA[<h2>1.本地合成、测试及提交</h2>

<h3>1).本地合成与测试</h3>

<p>  所有的补丁都须在自己的分支上合成,假设本地分支名为patch<br/>
  在工作目录执行repo branch,所示结果如下: (*  patch表示当前所在为patch)</p>

<pre><code>lbz@elink:~$ repo branch
   elink_sw                  | in all projects
   mtk                       | in all projects
*  patch                     | in all projects
</code></pre>

<!--more-->


<h3>2).本地提交</h3>

<p>  在所有补丁都测试完毕后,执行repo status<br/>
  所示结果如下:<br/>
<code>
    lbz@elink:~$ repo status
    # on branch patch
    project alps/mediatek/config/md790/             branch patch
     -m     ProjectConfig.mk
    project alps/mediatek/custom/common/            branch patch
     --     kernel/lcm/md970_lvds/md970_lvds.c
</code>
  根据上述结果可知:<br/>
  a.在alps/mediatek/config/md790/下修改了ProjectConfig.mk文件<br/>
  b.在alps/mediatek/custom/common/添加了kernel/lcm/md970_lvds/md970_lvds.c文件</p>

<p>  则可以用如下方式提交</p>

<h4>a.提交对ProjectConfig.mk文件的修改</h4>

<p>  (如果只是对文件修改,git commit -am &ldquo;注释&#8221;等价于执行git add 和 git commit两条命令)</p>

<pre><code>lbz@elink:~$ cd alps/mediatek/config/md790/
lbz@elink:~/alps/mediatek/config/md790$ git commit -am "update ProjectConfig.mk"
</code></pre>

<h4>b.提交对kernel/lcm/md970_lvds/md970_lvds.c文件的添加</h4>

<p>  (不可通过git commit -am &ldquo;注释&#8221;来提交,须单独git add命令)</p>

<pre><code>lbz@elink:~$ cd alps/mediatek/custom/common/
lbz@elink:~/alps/mediatek/custom/common$ git add kernel/lcm/md970_lvds/md970_lvds.c
lbz@elink:~/alps/mediatek/custom/common$ git commit -m "add md970_lvds.c"
</code></pre>

<p>  至此,本地分支的提交结束</p>

<h2>2.远程分支的拉取及与本地分支的合并</h2>

<p>  考虑到不同人可能会对同一文件进行修改从而导致修改冲突,所以所有冲突必须在本地解决之后才能执行push操作</p>

<h3>1).远程分支的拉取</h3>

<p>  拉取分支先须切换到mtk分支执行repo sync命令,然后执行切换到elink_sw分支执行pull操作</p>

<h4>a.repo sync</h4>

<p>  (repo sync的输出内容与更新内容的多少有变更)</p>

<pre><code>lbz@elink:~$ repo checkout mtk
Checkout mtk: 100% (424/424), done.  
liaobz@elink-soft-desktop:~$ repo sync
Fetching projects: 100% (424/424), done.
Syncing work tree: 100% (424/424), done.
</code></pre>

<h4>b.拉取远程代码</h4>

<pre><code>lbz@elink:~$ repo checkout elink_sw
Checkout elink_sw: 100% (424/424), done.  
lbz@elink:~$ repo forall -c git pull md77 elink_sw
</code></pre>

<h3>2).本地分支的合并</h3>

<p>  合并代码的时候须先切换到本地分支再进行git merge操作</p>

<pre><code>lbz@elink:~$ repo checkout patch
Checkout patch: 100% (424/424), done.  
lbz@elink:~$ repo forall -c git merge elink_sw
</code></pre>

<p>  注意输出内容,如果提到有冲突(conflict),须手动处理<br/>
  (过程暂略)</p>

<p>  <strong>!重要:须在合并完后再次测试,保证所做的更改未受合并影响</strong></p>

<h2>3.提交到远程elink_preview分支</h2>

<pre><code>git push md77 patch:elink_preview
</code></pre>
]]></content>
  </entry>
  
</feed>
